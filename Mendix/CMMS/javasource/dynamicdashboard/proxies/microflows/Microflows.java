// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package dynamicdashboard.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the DynamicDashboard module
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 생성시 필요 Obj 전달 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_DashBoard_NewBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.ACT_DashBoard_New");
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 생성시 필요 Obj 전달 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void aCT_DashBoard_New(IContext context)
	{
		aCT_DashBoard_NewBuilder().execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Dashboard_SaveBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.ACT_Dashboard_Save");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void aCT_Dashboard_Save(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		aCT_Dashboard_SaveBuilder(
				_dashboard
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Drag_MaintananceCostBuilder(
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.ACT_Drag_MaintananceCost");
		builder = builder.withParam("JSONObject", _jSONObject);
		return builder;
	}

	public static void aCT_Drag_MaintananceCost(
		IContext context,
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		aCT_Drag_MaintananceCostBuilder(
				_jSONObject
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Drag_MTBFBuilder(
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.ACT_Drag_MTBF");
		builder = builder.withParam("JSONObject", _jSONObject);
		return builder;
	}

	public static void aCT_Drag_MTBF(
		IContext context,
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		aCT_Drag_MTBFBuilder(
				_jSONObject
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Drag_MTTRBuilder(
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.ACT_Drag_MTTR");
		builder = builder.withParam("JSONObject", _jSONObject);
		return builder;
	}

	public static void aCT_Drag_MTTR(
		IContext context,
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		aCT_Drag_MTTRBuilder(
				_jSONObject
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Drag_Same_Parent_Non_NestedBuilder(
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.ACT_Drag_Same_Parent_Non_Nested");
		builder = builder.withParam("JSONObject", _jSONObject);
		return builder;
	}

	public static void aCT_Drag_Same_Parent_Non_Nested(
		IContext context,
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		aCT_Drag_Same_Parent_Non_NestedBuilder(
				_jSONObject
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Drag_SensorBuilder(
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.ACT_Drag_Sensor");
		builder = builder.withParam("JSONObject", _jSONObject);
		return builder;
	}

	public static void aCT_Drag_Sensor(
		IContext context,
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		aCT_Drag_SensorBuilder(
				_jSONObject
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Drag_WorkByPeriodBuilder(
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.ACT_Drag_WorkByPeriod");
		builder = builder.withParam("JSONObject", _jSONObject);
		return builder;
	}

	public static void aCT_Drag_WorkByPeriod(
		IContext context,
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		aCT_Drag_WorkByPeriodBuilder(
				_jSONObject
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Drag_WorkOrderBuilder(
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.ACT_Drag_WorkOrder");
		builder = builder.withParam("JSONObject", _jSONObject);
		return builder;
	}

	public static void aCT_Drag_WorkOrder(
		IContext context,
		dynamicdashboard.proxies.JSONObject _jSONObject
	)
	{
		aCT_Drag_WorkOrderBuilder(
				_jSONObject
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dashboard_CommitBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.Dashboard_Commit");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void dashboard_Commit(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		dashboard_CommitBuilder(
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dashboard_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.Dashboard_Create");
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static dynamicdashboard.proxies.Dashboard dashboard_Create(IContext context)
	{
		Object result = dashboard_CreateBuilder().execute(context);
		return result == null ? null : dynamicdashboard.proxies.Dashboard.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 설정된 Type의 유효성체크, commit 및 UUID 설정
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dashboard_TypeValidBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.Dashboard_TypeValid");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 설정된 Type의 유효성체크, commit 및 UUID 설정
	 * 
	 * V 1.0 : 최초생성
	 */
	public static boolean dashboard_TypeValid(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		Object result = dashboard_TypeValidBuilder(
				_dashboard
			)
			.execute(context);
		return (boolean) result;
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_JSONObjectBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.DS_JSONObject");
		return builder;
	}

	public static dynamicdashboard.proxies.JSONObject dS_JSONObject(IContext context)
	{
		Object result = dS_JSONObjectBuilder().execute(context);
		return result == null ? null : dynamicdashboard.proxies.JSONObject.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder maintanance_CommitBuilder(
		dynamicdashboard.proxies.MaintananceCost _maintananceCost
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.Maintanance_Commit");
		builder = builder.withParam("MaintananceCost", _maintananceCost);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void maintanance_Commit(
		IContext context,
		dynamicdashboard.proxies.MaintananceCost _maintananceCost
	)
	{
		maintanance_CommitBuilder(
				_maintananceCost
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/24
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 불필요한 Type object 삭제용
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder maintanance_DeleteBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.Maintanance_Delete");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/24
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 불필요한 Type object 삭제용
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void maintanance_Delete(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		maintanance_DeleteBuilder(
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder maintananceCost_CreateBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MaintananceCost_Create");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static dynamicdashboard.proxies.MaintananceCost maintananceCost_Create(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		Object result = maintananceCost_CreateBuilder(
				_dashboard
			)
			.execute(context);
		return result == null ? null : dynamicdashboard.proxies.MaintananceCost.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 보기 추가 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder maintananceCost_NewBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MaintananceCost_New");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 보기 추가 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void maintananceCost_New(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		maintananceCost_NewBuilder(
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 추가,수정된 Type 저장 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder maintananceCost_SaveBuilder(
		dynamicdashboard.proxies.MaintananceCost _maintananceCost,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MaintananceCost_Save");
		builder = builder.withParam("MaintananceCost", _maintananceCost);
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 추가,수정된 Type 저장 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void maintananceCost_Save(
		IContext context,
		dynamicdashboard.proxies.MaintananceCost _maintananceCost,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		maintananceCost_SaveBuilder(
				_maintananceCost,
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mTBF_CommitBuilder(
		dynamicdashboard.proxies.MTBF _mTBF
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MTBF_Commit");
		builder = builder.withParam("MTBF", _mTBF);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void mTBF_Commit(
		IContext context,
		dynamicdashboard.proxies.MTBF _mTBF
	)
	{
		mTBF_CommitBuilder(
				_mTBF
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mTBF_CreateBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MTBF_Create");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static dynamicdashboard.proxies.MTBF mTBF_Create(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		Object result = mTBF_CreateBuilder(
				_dashboard
			)
			.execute(context);
		return result == null ? null : dynamicdashboard.proxies.MTBF.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/24
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 불필요한 Type object 삭제용
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mTBF_DeleteBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MTBF_Delete");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/24
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 불필요한 Type object 삭제용
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void mTBF_Delete(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		mTBF_DeleteBuilder(
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 보기 추가 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mTBF_NewBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MTBF_New");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 보기 추가 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void mTBF_New(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		mTBF_NewBuilder(
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 추가,수정된 Type 저장 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mTBF_SaveBuilder(
		dynamicdashboard.proxies.MTBF _mTBF,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MTBF_Save");
		builder = builder.withParam("MTBF", _mTBF);
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 추가,수정된 Type 저장 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void mTBF_Save(
		IContext context,
		dynamicdashboard.proxies.MTBF _mTBF,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		mTBF_SaveBuilder(
				_mTBF,
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mTTR_CommitBuilder(
		dynamicdashboard.proxies.MTTR _mTTR
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MTTR_Commit");
		builder = builder.withParam("MTTR", _mTTR);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void mTTR_Commit(
		IContext context,
		dynamicdashboard.proxies.MTTR _mTTR
	)
	{
		mTTR_CommitBuilder(
				_mTTR
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mTTR_CreateBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MTTR_Create");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static dynamicdashboard.proxies.MTTR mTTR_Create(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		Object result = mTTR_CreateBuilder(
				_dashboard
			)
			.execute(context);
		return result == null ? null : dynamicdashboard.proxies.MTTR.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/24
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 불필요한 Type object 삭제용
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mTTR_DeleteBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MTTR_Delete");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/24
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 불필요한 Type object 삭제용
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void mTTR_Delete(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		mTTR_DeleteBuilder(
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 보기 추가 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mTTR_NewBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MTTR_New");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 보기 추가 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void mTTR_New(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		mTTR_NewBuilder(
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 추가,수정된 Type 저장 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder mTTR_SaveBuilder(
		dynamicdashboard.proxies.MTTR _mTTR,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.MTTR_Save");
		builder = builder.withParam("MTTR", _mTTR);
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 추가,수정된 Type 저장 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void mTTR_Save(
		IContext context,
		dynamicdashboard.proxies.MTTR _mTTR,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		mTTR_SaveBuilder(
				_mTTR,
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sensor_CommitBuilder(
		dynamicdashboard.proxies.Sensor _sensor
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.Sensor_Commit");
		builder = builder.withParam("Sensor", _sensor);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void sensor_Commit(
		IContext context,
		dynamicdashboard.proxies.Sensor _sensor
	)
	{
		sensor_CommitBuilder(
				_sensor
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sensor_CreateBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.Sensor_Create");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static dynamicdashboard.proxies.Sensor sensor_Create(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		Object result = sensor_CreateBuilder(
				_dashboard
			)
			.execute(context);
		return result == null ? null : dynamicdashboard.proxies.Sensor.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/24
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 불필요한 Type object 삭제용
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sensor_DeleteBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.Sensor_Delete");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/24
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 불필요한 Type object 삭제용
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void sensor_Delete(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		sensor_DeleteBuilder(
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 보기 추가 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sensor_NewBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.Sensor_New");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 보기 추가 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void sensor_New(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		sensor_NewBuilder(
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 추가,수정된 Type 저장 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sensor_SaveBuilder(
		dynamicdashboard.proxies.Sensor _sensor,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.Sensor_Save");
		builder = builder.withParam("Sensor", _sensor);
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 추가,수정된 Type 저장 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void sensor_Save(
		IContext context,
		dynamicdashboard.proxies.Sensor _sensor,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		sensor_SaveBuilder(
				_sensor,
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장시 UUID로 사용 될 이름의 중복 여부 체크
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder vAL_Dashboard_NameBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.VAL_Dashboard_Name");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장시 UUID로 사용 될 이름의 중복 여부 체크
	 * 
	 * V 1.0 : 최초생성
	 */
	public static boolean vAL_Dashboard_Name(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		Object result = vAL_Dashboard_NameBuilder(
				_dashboard
			)
			.execute(context);
		return (boolean) result;
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder workByPeriod_CommitBuilder(
		dynamicdashboard.proxies.WorkByPeriod _workByPeriod
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.WorkByPeriod_Commit");
		builder = builder.withParam("WorkByPeriod", _workByPeriod);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void workByPeriod_Commit(
		IContext context,
		dynamicdashboard.proxies.WorkByPeriod _workByPeriod
	)
	{
		workByPeriod_CommitBuilder(
				_workByPeriod
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder workByPeriod_CreateBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.WorkByPeriod_Create");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static dynamicdashboard.proxies.WorkByPeriod workByPeriod_Create(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		Object result = workByPeriod_CreateBuilder(
				_dashboard
			)
			.execute(context);
		return result == null ? null : dynamicdashboard.proxies.WorkByPeriod.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/24
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 불필요한 Type object 삭제용
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder workByPeriod_DeleteBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.WorkByPeriod_Delete");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/24
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 불필요한 Type object 삭제용
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void workByPeriod_Delete(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		workByPeriod_DeleteBuilder(
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 보기 추가 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder workByPeriod_NewBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.WorkByPeriod_New");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 보기 추가 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void workByPeriod_New(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		workByPeriod_NewBuilder(
				_dashboard
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder workByPeriod_SaveBuilder(
		dynamicdashboard.proxies.WorkByPeriod _workByPeriod,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.WorkByPeriod_Save");
		builder = builder.withParam("WorkByPeriod", _workByPeriod);
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	public static void workByPeriod_Save(
		IContext context,
		dynamicdashboard.proxies.WorkByPeriod _workByPeriod,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		workByPeriod_SaveBuilder(
				_workByPeriod,
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder workOrder_CommitBuilder(
		dynamicdashboard.proxies.WorkOrder _workOrder
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.WorkOrder_Commit");
		builder = builder.withParam("WorkOrder", _workOrder);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 커밋 Sub MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void workOrder_Commit(
		IContext context,
		dynamicdashboard.proxies.WorkOrder _workOrder
	)
	{
		workOrder_CommitBuilder(
				_workOrder
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder workOrder_CreateBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.WorkOrder_Create");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/23
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Create Sub MF // Return obj
	 * 
	 * V 1.0 : 최초생성
	 */
	public static dynamicdashboard.proxies.WorkOrder workOrder_Create(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		Object result = workOrder_CreateBuilder(
				_dashboard
			)
			.execute(context);
		return result == null ? null : dynamicdashboard.proxies.WorkOrder.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/24
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 불필요한 Type object 삭제용
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder workOrder_DeleteBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.WorkOrder_Delete");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/24
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : Dashboard 저장 시 불필요한 Type object 삭제용
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void workOrder_Delete(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		workOrder_DeleteBuilder(
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 보기 추가 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder workOrder_NewBuilder(
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.WorkOrder_New");
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 보기 추가 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void workOrder_New(
		IContext context,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		workOrder_NewBuilder(
				_dashboard
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 추가,수정된 Type 저장 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder workOrder_SaveBuilder(
		dynamicdashboard.proxies.WorkOrder _workOrder,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("DynamicDashboard.WorkOrder_Save");
		builder = builder.withParam("WorkOrder", _workOrder);
		builder = builder.withParam("Dashboard", _dashboard);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023/10/25
	 * 최종수정자 : 
	 * 최종수정일 : 
	 * 
	 * 설명 : 생성되어있는 Dashboard에 추가,수정된 Type 저장 MF
	 * 
	 * V 1.0 : 최초생성
	 */
	public static void workOrder_Save(
		IContext context,
		dynamicdashboard.proxies.WorkOrder _workOrder,
		dynamicdashboard.proxies.Dashboard _dashboard
	)
	{
		workOrder_SaveBuilder(
				_workOrder,
				_dashboard
			)
			.execute(context);
	}
}
