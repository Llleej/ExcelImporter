// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package monitoring.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the Monitoring module
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_PowerChart_ShowBuilder(
		monitoring.proxies.PowerRealTimeData _powerRealTimeData,
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.ACT_PowerChart_Show");
		builder = builder.withParam("PowerRealTimeData", _powerRealTimeData);
		builder = builder.withParam("MonitoringHelper", _monitoringHelper);
		return builder;
	}

	public static void aCT_PowerChart_Show(
		IContext context,
		monitoring.proxies.PowerRealTimeData _powerRealTimeData,
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		aCT_PowerChart_ShowBuilder(
				_powerRealTimeData,
				_monitoringHelper
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Sensor_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.ACT_Sensor_Create");
		return builder;
	}

	public static void aCT_Sensor_Create(IContext context)
	{
		aCT_Sensor_CreateBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Sensor_DeleteBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.ACT_Sensor_Delete");
		return builder;
	}

	public static void aCT_Sensor_Delete(IContext context)
	{
		aCT_Sensor_DeleteBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Sensor_EditBuilder(
		monitoring.proxies.Sensor _sensor
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.ACT_Sensor_Edit");
		builder = builder.withParam("Sensor", _sensor);
		return builder;
	}

	public static void aCT_Sensor_Edit(
		IContext context,
		monitoring.proxies.Sensor _sensor
	)
	{
		aCT_Sensor_EditBuilder(
				_sensor
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_ActivePower_ChartBuilder(
		equipment_management.proxies.Equipment _equipment,
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.DS_ActivePower_Chart");
		builder = builder.withParam("Equipment", _equipment);
		builder = builder.withParam("MonitoringHelper", _monitoringHelper);
		return builder;
	}

	public static java.util.List<monitoring.proxies.MonitoringChartData> dS_ActivePower_Chart(
		IContext context,
		equipment_management.proxies.Equipment _equipment,
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		Object result = dS_ActivePower_ChartBuilder(
				_equipment,
				_monitoringHelper
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> monitoring.proxies.MonitoringChartData.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_MaxPower_ChartBuilder(
		equipment_management.proxies.Equipment _equipment,
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.DS_MaxPower_Chart");
		builder = builder.withParam("Equipment", _equipment);
		builder = builder.withParam("MonitoringHelper", _monitoringHelper);
		return builder;
	}

	public static java.util.List<monitoring.proxies.MonitoringChartData> dS_MaxPower_Chart(
		IContext context,
		equipment_management.proxies.Equipment _equipment,
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		Object result = dS_MaxPower_ChartBuilder(
				_equipment,
				_monitoringHelper
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> monitoring.proxies.MonitoringChartData.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_MonitoringHelper_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.DS_MonitoringHelper_Create");
		return builder;
	}

	public static monitoring.proxies.MonitoringHelper dS_MonitoringHelper_Create(IContext context)
	{
		Object result = dS_MonitoringHelper_CreateBuilder().execute(context);
		return result == null ? null : monitoring.proxies.MonitoringHelper.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_SensorRealTimeData_RetrieveBuilder(
		monitoring.proxies.Sensor _sensor
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.DS_SensorRealTimeData_Retrieve");
		builder = builder.withParam("Sensor", _sensor);
		return builder;
	}

	public static monitoring.proxies.SensorMonitoringHelper dS_SensorRealTimeData_Retrieve(
		IContext context,
		monitoring.proxies.Sensor _sensor
	)
	{
		Object result = dS_SensorRealTimeData_RetrieveBuilder(
				_sensor
			)
			.execute(context);
		return result == null ? null : monitoring.proxies.SensorMonitoringHelper.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_TemperatureData_ChartBuilder(
		equipment_management.proxies.Equipment _equipment,
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.DS_TemperatureData_Chart");
		builder = builder.withParam("Equipment", _equipment);
		builder = builder.withParam("MonitoringHelper", _monitoringHelper);
		return builder;
	}

	public static java.util.List<monitoring.proxies.TemperatureRealTimeData> dS_TemperatureData_Chart(
		IContext context,
		equipment_management.proxies.Equipment _equipment,
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		Object result = dS_TemperatureData_ChartBuilder(
				_equipment,
				_monitoringHelper
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> monitoring.proxies.TemperatureRealTimeData.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_TemperatureDataList_RetrieveBuilder(
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.DS_TemperatureDataList_Retrieve");
		builder = builder.withParam("MonitoringHelper", _monitoringHelper);
		return builder;
	}

	public static java.util.List<monitoring.proxies.TemperatureRealTimeData> dS_TemperatureDataList_Retrieve(
		IContext context,
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		Object result = dS_TemperatureDataList_RetrieveBuilder(
				_monitoringHelper
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> monitoring.proxies.TemperatureRealTimeData.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dummy_RealTimeData_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.Dummy_RealTimeData_Create");
		return builder;
	}

	public static void dummy_RealTimeData_Create(IContext context)
	{
		dummy_RealTimeData_CreateBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dummy_RealTimeSensorData_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.Dummy_RealTimeSensorData_Create");
		return builder;
	}

	public static void dummy_RealTimeSensorData_Create(IContext context)
	{
		dummy_RealTimeSensorData_CreateBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder microflow_2Builder(
		monitoring.proxies.TemperatureRealTimeData _temperatureRealTimeData,
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.Microflow_2");
		builder = builder.withParam("TemperatureRealTimeData", _temperatureRealTimeData);
		builder = builder.withParam("MonitoringHelper", _monitoringHelper);
		return builder;
	}

	public static void microflow_2(
		IContext context,
		monitoring.proxies.TemperatureRealTimeData _temperatureRealTimeData,
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		microflow_2Builder(
				_temperatureRealTimeData,
				_monitoringHelper
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder microflow_3Builder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.Microflow_3");
		return builder;
	}

	public static monitoring.proxies.SensorSearchHelper microflow_3(IContext context)
	{
		Object result = microflow_3Builder().execute(context);
		return result == null ? null : monitoring.proxies.SensorSearchHelper.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCH_MonbitoringHelper_RefreshBuilder(
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.OCH_MonbitoringHelper_Refresh");
		builder = builder.withParam("MonitoringHelper", _monitoringHelper);
		return builder;
	}

	public static void oCH_MonbitoringHelper_Refresh(
		IContext context,
		monitoring.proxies.MonitoringHelper _monitoringHelper
	)
	{
		oCH_MonbitoringHelper_RefreshBuilder(
				_monitoringHelper
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_TemperatureData_TimeStamp_CompareBuilder(
		java.util.List<monitoring.proxies.TemperatureRealTimeData> _newTemperatureRealTimeDataList,
		java.util.Date _newStartTime,
		java.util.Date _newEndTime,
		java.util.List<monitoring.proxies.TemperatureRealTimeData> _temperatureRealTimeDataList
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Monitoring.SUB_TemperatureData_TimeStamp_Compare");
		builder = builder.withParam("NewTemperatureRealTimeDataList", _newTemperatureRealTimeDataList);
		builder = builder.withParam("NewStartTime", _newStartTime);
		builder = builder.withParam("NewEndTime", _newEndTime);
		builder = builder.withParam("TemperatureRealTimeDataList", _temperatureRealTimeDataList);
		return builder;
	}

	public static void sUB_TemperatureData_TimeStamp_Compare(
		IContext context,
		java.util.List<monitoring.proxies.TemperatureRealTimeData> _newTemperatureRealTimeDataList,
		java.util.Date _newStartTime,
		java.util.Date _newEndTime,
		java.util.List<monitoring.proxies.TemperatureRealTimeData> _temperatureRealTimeDataList
	)
	{
		sUB_TemperatureData_TimeStamp_CompareBuilder(
				_newTemperatureRealTimeDataList,
				_newStartTime,
				_newEndTime,
				_temperatureRealTimeDataList
			)
			.execute(context);
	}
}
