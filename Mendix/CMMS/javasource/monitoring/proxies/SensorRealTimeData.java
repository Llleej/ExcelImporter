// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package monitoring.proxies;

public class SensorRealTimeData implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject sensorRealTimeDataMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Monitoring.SensorRealTimeData";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Value("Value"),
		TimeStamp("TimeStamp"),
		SensorRealTimeData_Sensor("Monitoring.SensorRealTimeData_Sensor");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public SensorRealTimeData(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected SensorRealTimeData(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject sensorRealTimeDataMendixObject)
	{
		if (sensorRealTimeDataMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, sensorRealTimeDataMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.sensorRealTimeDataMendixObject = sensorRealTimeDataMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static monitoring.proxies.SensorRealTimeData initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new monitoring.proxies.SensorRealTimeData(context, mendixObject);
	}

	public static monitoring.proxies.SensorRealTimeData load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return monitoring.proxies.SensorRealTimeData.initialize(context, mendixObject);
	}

	public static java.util.List<monitoring.proxies.SensorRealTimeData> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		return com.mendix.core.Core.createXPathQuery(String.format("//%1$s%2$s", entityName, xpathConstraint))
			.execute(context)
			.stream()
			.map(obj -> monitoring.proxies.SensorRealTimeData.initialize(context, obj))
			.collect(java.util.stream.Collectors.toList());
	}

	/**
	 * @return value of Value
	 */
	public final java.lang.String getValue()
	{
		return getValue(getContext());
	}

	/**
	 * @param context
	 * @return value of Value
	 */
	public final java.lang.String getValue(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Value.toString());
	}

	/**
	 * Set value of Value
	 * @param value
	 */
	public final void setValue(java.lang.String value)
	{
		setValue(getContext(), value);
	}

	/**
	 * Set value of Value
	 * @param context
	 * @param value
	 */
	public final void setValue(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String value)
	{
		getMendixObject().setValue(context, MemberNames.Value.toString(), value);
	}

	/**
	 * @return value of TimeStamp
	 */
	public final java.util.Date getTimeStamp()
	{
		return getTimeStamp(getContext());
	}

	/**
	 * @param context
	 * @return value of TimeStamp
	 */
	public final java.util.Date getTimeStamp(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.TimeStamp.toString());
	}

	/**
	 * Set value of TimeStamp
	 * @param timestamp
	 */
	public final void setTimeStamp(java.util.Date timestamp)
	{
		setTimeStamp(getContext(), timestamp);
	}

	/**
	 * Set value of TimeStamp
	 * @param context
	 * @param timestamp
	 */
	public final void setTimeStamp(com.mendix.systemwideinterfaces.core.IContext context, java.util.Date timestamp)
	{
		getMendixObject().setValue(context, MemberNames.TimeStamp.toString(), timestamp);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of SensorRealTimeData_Sensor
	 */
	public final monitoring.proxies.Sensor getSensorRealTimeData_Sensor() throws com.mendix.core.CoreException
	{
		return getSensorRealTimeData_Sensor(getContext());
	}

	/**
	 * @param context
	 * @return value of SensorRealTimeData_Sensor
	 * @throws com.mendix.core.CoreException
	 */
	public final monitoring.proxies.Sensor getSensorRealTimeData_Sensor(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		monitoring.proxies.Sensor result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.SensorRealTimeData_Sensor.toString());
		if (identifier != null) {
			result = monitoring.proxies.Sensor.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of SensorRealTimeData_Sensor
	 * @param sensorrealtimedata_sensor
	 */
	public final void setSensorRealTimeData_Sensor(monitoring.proxies.Sensor sensorrealtimedata_sensor)
	{
		setSensorRealTimeData_Sensor(getContext(), sensorrealtimedata_sensor);
	}

	/**
	 * Set value of SensorRealTimeData_Sensor
	 * @param context
	 * @param sensorrealtimedata_sensor
	 */
	public final void setSensorRealTimeData_Sensor(com.mendix.systemwideinterfaces.core.IContext context, monitoring.proxies.Sensor sensorrealtimedata_sensor)
	{
		if (sensorrealtimedata_sensor == null) {
			getMendixObject().setValue(context, MemberNames.SensorRealTimeData_Sensor.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.SensorRealTimeData_Sensor.toString(), sensorrealtimedata_sensor.getMendixObject().getId());
		}
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return sensorRealTimeDataMendixObject;
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final monitoring.proxies.SensorRealTimeData that = (monitoring.proxies.SensorRealTimeData) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
