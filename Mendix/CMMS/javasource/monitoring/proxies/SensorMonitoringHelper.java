// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package monitoring.proxies;

public class SensorMonitoringHelper implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject sensorMonitoringHelperMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Monitoring.SensorMonitoringHelper";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		OutOfRange("OutOfRange"),
		IsRunning("IsRunning"),
		SensorMonitoringHelper_SensorRealTimeData("Monitoring.SensorMonitoringHelper_SensorRealTimeData");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public SensorMonitoringHelper(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected SensorMonitoringHelper(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject sensorMonitoringHelperMendixObject)
	{
		if (sensorMonitoringHelperMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, sensorMonitoringHelperMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.sensorMonitoringHelperMendixObject = sensorMonitoringHelperMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static monitoring.proxies.SensorMonitoringHelper initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new monitoring.proxies.SensorMonitoringHelper(context, mendixObject);
	}

	public static monitoring.proxies.SensorMonitoringHelper load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return monitoring.proxies.SensorMonitoringHelper.initialize(context, mendixObject);
	}

	/**
	 * @return value of OutOfRange
	 */
	public final java.lang.Boolean getOutOfRange()
	{
		return getOutOfRange(getContext());
	}

	/**
	 * @param context
	 * @return value of OutOfRange
	 */
	public final java.lang.Boolean getOutOfRange(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.OutOfRange.toString());
	}

	/**
	 * Set value of OutOfRange
	 * @param outofrange
	 */
	public final void setOutOfRange(java.lang.Boolean outofrange)
	{
		setOutOfRange(getContext(), outofrange);
	}

	/**
	 * Set value of OutOfRange
	 * @param context
	 * @param outofrange
	 */
	public final void setOutOfRange(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean outofrange)
	{
		getMendixObject().setValue(context, MemberNames.OutOfRange.toString(), outofrange);
	}

	/**
	 * @return value of IsRunning
	 */
	public final java.lang.Boolean getIsRunning()
	{
		return getIsRunning(getContext());
	}

	/**
	 * @param context
	 * @return value of IsRunning
	 */
	public final java.lang.Boolean getIsRunning(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.Boolean) getMendixObject().getValue(context, MemberNames.IsRunning.toString());
	}

	/**
	 * Set value of IsRunning
	 * @param isrunning
	 */
	public final void setIsRunning(java.lang.Boolean isrunning)
	{
		setIsRunning(getContext(), isrunning);
	}

	/**
	 * Set value of IsRunning
	 * @param context
	 * @param isrunning
	 */
	public final void setIsRunning(com.mendix.systemwideinterfaces.core.IContext context, java.lang.Boolean isrunning)
	{
		getMendixObject().setValue(context, MemberNames.IsRunning.toString(), isrunning);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of SensorMonitoringHelper_SensorRealTimeData
	 */
	public final monitoring.proxies.SensorRealTimeData getSensorMonitoringHelper_SensorRealTimeData() throws com.mendix.core.CoreException
	{
		return getSensorMonitoringHelper_SensorRealTimeData(getContext());
	}

	/**
	 * @param context
	 * @return value of SensorMonitoringHelper_SensorRealTimeData
	 * @throws com.mendix.core.CoreException
	 */
	public final monitoring.proxies.SensorRealTimeData getSensorMonitoringHelper_SensorRealTimeData(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		monitoring.proxies.SensorRealTimeData result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.SensorMonitoringHelper_SensorRealTimeData.toString());
		if (identifier != null) {
			result = monitoring.proxies.SensorRealTimeData.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of SensorMonitoringHelper_SensorRealTimeData
	 * @param sensormonitoringhelper_sensorrealtimedata
	 */
	public final void setSensorMonitoringHelper_SensorRealTimeData(monitoring.proxies.SensorRealTimeData sensormonitoringhelper_sensorrealtimedata)
	{
		setSensorMonitoringHelper_SensorRealTimeData(getContext(), sensormonitoringhelper_sensorrealtimedata);
	}

	/**
	 * Set value of SensorMonitoringHelper_SensorRealTimeData
	 * @param context
	 * @param sensormonitoringhelper_sensorrealtimedata
	 */
	public final void setSensorMonitoringHelper_SensorRealTimeData(com.mendix.systemwideinterfaces.core.IContext context, monitoring.proxies.SensorRealTimeData sensormonitoringhelper_sensorrealtimedata)
	{
		if (sensormonitoringhelper_sensorrealtimedata == null) {
			getMendixObject().setValue(context, MemberNames.SensorMonitoringHelper_SensorRealTimeData.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.SensorMonitoringHelper_SensorRealTimeData.toString(), sensormonitoringhelper_sensorrealtimedata.getMendixObject().getId());
		}
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return sensorMonitoringHelperMendixObject;
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final monitoring.proxies.SensorMonitoringHelper that = (monitoring.proxies.SensorMonitoringHelper) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
