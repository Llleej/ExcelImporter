// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package monitoring.proxies;

/**
 * 최초 작성자 : 이단비
 * 최초 작성일 : 2023/10/05
 * 최종 수정자 : 
 * 최종 수정일 : 2023/10/05
 * 설명 : 센서 정보를 전송하는 서버 정보
 * Version 1.0 : 생성
 */
public class Server implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject serverMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Monitoring.Server";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		ServerName("ServerName"),
		IP("IP"),
		Port("Port");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Server(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected Server(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject serverMendixObject)
	{
		if (serverMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, serverMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.serverMendixObject = serverMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static monitoring.proxies.Server initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new monitoring.proxies.Server(context, mendixObject);
	}

	public static monitoring.proxies.Server load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return monitoring.proxies.Server.initialize(context, mendixObject);
	}

	public static java.util.List<monitoring.proxies.Server> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		return com.mendix.core.Core.createXPathQuery(String.format("//%1$s%2$s", entityName, xpathConstraint))
			.execute(context)
			.stream()
			.map(obj -> monitoring.proxies.Server.initialize(context, obj))
			.collect(java.util.stream.Collectors.toList());
	}

	/**
	 * @return value of ServerName
	 */
	public final java.lang.String getServerName()
	{
		return getServerName(getContext());
	}

	/**
	 * @param context
	 * @return value of ServerName
	 */
	public final java.lang.String getServerName(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ServerName.toString());
	}

	/**
	 * Set value of ServerName
	 * @param servername
	 */
	public final void setServerName(java.lang.String servername)
	{
		setServerName(getContext(), servername);
	}

	/**
	 * Set value of ServerName
	 * @param context
	 * @param servername
	 */
	public final void setServerName(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String servername)
	{
		getMendixObject().setValue(context, MemberNames.ServerName.toString(), servername);
	}

	/**
	 * @return value of IP
	 */
	public final java.lang.String getIP()
	{
		return getIP(getContext());
	}

	/**
	 * @param context
	 * @return value of IP
	 */
	public final java.lang.String getIP(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.IP.toString());
	}

	/**
	 * Set value of IP
	 * @param ip
	 */
	public final void setIP(java.lang.String ip)
	{
		setIP(getContext(), ip);
	}

	/**
	 * Set value of IP
	 * @param context
	 * @param ip
	 */
	public final void setIP(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String ip)
	{
		getMendixObject().setValue(context, MemberNames.IP.toString(), ip);
	}

	/**
	 * @return value of Port
	 */
	public final java.lang.String getPort()
	{
		return getPort(getContext());
	}

	/**
	 * @param context
	 * @return value of Port
	 */
	public final java.lang.String getPort(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Port.toString());
	}

	/**
	 * Set value of Port
	 * @param port
	 */
	public final void setPort(java.lang.String port)
	{
		setPort(getContext(), port);
	}

	/**
	 * Set value of Port
	 * @param context
	 * @param port
	 */
	public final void setPort(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String port)
	{
		getMendixObject().setValue(context, MemberNames.Port.toString(), port);
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return serverMendixObject;
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final monitoring.proxies.Server that = (monitoring.proxies.Server) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
