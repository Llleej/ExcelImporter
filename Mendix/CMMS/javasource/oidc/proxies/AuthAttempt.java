// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package oidc.proxies;

/**
 * An attempt to authenticate/authorize via OIDC in this app. This is a one time use object that stores nonce and state to avoid replay attacks.
 */
public class AuthAttempt implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject authAttemptMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "OIDC.AuthAttempt";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		State("State"),
		ReturnUrl("ReturnUrl"),
		CodeVerifier("CodeVerifier"),
		Nonce("Nonce"),
		DeviceType("DeviceType"),
		AuthAttempt_ClientConfiguration("OIDC.AuthAttempt_ClientConfiguration");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public AuthAttempt(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected AuthAttempt(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject authAttemptMendixObject)
	{
		if (authAttemptMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, authAttemptMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.authAttemptMendixObject = authAttemptMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static oidc.proxies.AuthAttempt initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new oidc.proxies.AuthAttempt(context, mendixObject);
	}

	public static oidc.proxies.AuthAttempt load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return oidc.proxies.AuthAttempt.initialize(context, mendixObject);
	}

	public static java.util.List<oidc.proxies.AuthAttempt> load(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String xpathConstraint) throws com.mendix.core.CoreException
	{
		return com.mendix.core.Core.createXPathQuery(String.format("//%1$s%2$s", entityName, xpathConstraint))
			.execute(context)
			.stream()
			.map(obj -> oidc.proxies.AuthAttempt.initialize(context, obj))
			.collect(java.util.stream.Collectors.toList());
	}

	/**
	 * @return value of State
	 */
	public final java.lang.String getState()
	{
		return getState(getContext());
	}

	/**
	 * @param context
	 * @return value of State
	 */
	public final java.lang.String getState(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.State.toString());
	}

	/**
	 * Set value of State
	 * @param state
	 */
	public final void setState(java.lang.String state)
	{
		setState(getContext(), state);
	}

	/**
	 * Set value of State
	 * @param context
	 * @param state
	 */
	public final void setState(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String state)
	{
		getMendixObject().setValue(context, MemberNames.State.toString(), state);
	}

	/**
	 * @return value of ReturnUrl
	 */
	public final java.lang.String getReturnUrl()
	{
		return getReturnUrl(getContext());
	}

	/**
	 * @param context
	 * @return value of ReturnUrl
	 */
	public final java.lang.String getReturnUrl(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.ReturnUrl.toString());
	}

	/**
	 * Set value of ReturnUrl
	 * @param returnurl
	 */
	public final void setReturnUrl(java.lang.String returnurl)
	{
		setReturnUrl(getContext(), returnurl);
	}

	/**
	 * Set value of ReturnUrl
	 * @param context
	 * @param returnurl
	 */
	public final void setReturnUrl(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String returnurl)
	{
		getMendixObject().setValue(context, MemberNames.ReturnUrl.toString(), returnurl);
	}

	/**
	 * @return value of CodeVerifier
	 */
	public final java.lang.String getCodeVerifier()
	{
		return getCodeVerifier(getContext());
	}

	/**
	 * @param context
	 * @return value of CodeVerifier
	 */
	public final java.lang.String getCodeVerifier(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.CodeVerifier.toString());
	}

	/**
	 * Set value of CodeVerifier
	 * @param codeverifier
	 */
	public final void setCodeVerifier(java.lang.String codeverifier)
	{
		setCodeVerifier(getContext(), codeverifier);
	}

	/**
	 * Set value of CodeVerifier
	 * @param context
	 * @param codeverifier
	 */
	public final void setCodeVerifier(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String codeverifier)
	{
		getMendixObject().setValue(context, MemberNames.CodeVerifier.toString(), codeverifier);
	}

	/**
	 * @return value of Nonce
	 */
	public final java.lang.String getNonce()
	{
		return getNonce(getContext());
	}

	/**
	 * @param context
	 * @return value of Nonce
	 */
	public final java.lang.String getNonce(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.Nonce.toString());
	}

	/**
	 * Set value of Nonce
	 * @param nonce
	 */
	public final void setNonce(java.lang.String nonce)
	{
		setNonce(getContext(), nonce);
	}

	/**
	 * Set value of Nonce
	 * @param context
	 * @param nonce
	 */
	public final void setNonce(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String nonce)
	{
		getMendixObject().setValue(context, MemberNames.Nonce.toString(), nonce);
	}

	/**
	 * @return value of DeviceType
	 */
	public final java.lang.String getDeviceType()
	{
		return getDeviceType(getContext());
	}

	/**
	 * @param context
	 * @return value of DeviceType
	 */
	public final java.lang.String getDeviceType(com.mendix.systemwideinterfaces.core.IContext context)
	{
		return (java.lang.String) getMendixObject().getValue(context, MemberNames.DeviceType.toString());
	}

	/**
	 * Set value of DeviceType
	 * @param devicetype
	 */
	public final void setDeviceType(java.lang.String devicetype)
	{
		setDeviceType(getContext(), devicetype);
	}

	/**
	 * Set value of DeviceType
	 * @param context
	 * @param devicetype
	 */
	public final void setDeviceType(com.mendix.systemwideinterfaces.core.IContext context, java.lang.String devicetype)
	{
		getMendixObject().setValue(context, MemberNames.DeviceType.toString(), devicetype);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of AuthAttempt_ClientConfiguration
	 */
	public final oidc.proxies.ClientConfiguration getAuthAttempt_ClientConfiguration() throws com.mendix.core.CoreException
	{
		return getAuthAttempt_ClientConfiguration(getContext());
	}

	/**
	 * @param context
	 * @return value of AuthAttempt_ClientConfiguration
	 * @throws com.mendix.core.CoreException
	 */
	public final oidc.proxies.ClientConfiguration getAuthAttempt_ClientConfiguration(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		oidc.proxies.ClientConfiguration result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.AuthAttempt_ClientConfiguration.toString());
		if (identifier != null) {
			result = oidc.proxies.ClientConfiguration.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of AuthAttempt_ClientConfiguration
	 * @param authattempt_clientconfiguration
	 */
	public final void setAuthAttempt_ClientConfiguration(oidc.proxies.ClientConfiguration authattempt_clientconfiguration)
	{
		setAuthAttempt_ClientConfiguration(getContext(), authattempt_clientconfiguration);
	}

	/**
	 * Set value of AuthAttempt_ClientConfiguration
	 * @param context
	 * @param authattempt_clientconfiguration
	 */
	public final void setAuthAttempt_ClientConfiguration(com.mendix.systemwideinterfaces.core.IContext context, oidc.proxies.ClientConfiguration authattempt_clientconfiguration)
	{
		if (authattempt_clientconfiguration == null) {
			getMendixObject().setValue(context, MemberNames.AuthAttempt_ClientConfiguration.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.AuthAttempt_ClientConfiguration.toString(), authattempt_clientconfiguration.getMendixObject().getId());
		}
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return authAttemptMendixObject;
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final oidc.proxies.AuthAttempt that = (oidc.proxies.AuthAttempt) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
