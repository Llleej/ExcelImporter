// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package cmms_administration.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the CMMS_Administration module
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/13
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/13
	 * 설명 : 거래처 등록을 위한 MF
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_BusinessPartner_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_BusinessPartner_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/13
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/13
	 * 설명 : 거래처 등록을 위한 MF
	 * Version 1.0 : 생성
	 */
	public static void aCT_BusinessPartner_Create(IContext context)
	{
		aCT_BusinessPartner_CreateBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/13
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : 데이터 그리드에서 선택 후 버튼 클릭 시 Active 컬럼 false로 변경
	 * 
	 * V1.0 : 최초 작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_BusinessPartner_DeactivationBuilder(
		material_management.proxies.BusinessPartner _businessPartner
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_BusinessPartner_Deactivation");
		builder = builder.withParam("BusinessPartner", _businessPartner);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/13
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : 데이터 그리드에서 선택 후 버튼 클릭 시 Active 컬럼 false로 변경
	 * 
	 * V1.0 : 최초 작성
	 */
	public static void aCT_BusinessPartner_Deactivation(
		IContext context,
		material_management.proxies.BusinessPartner _businessPartner
	)
	{
		aCT_BusinessPartner_DeactivationBuilder(
				_businessPartner
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_BusinessPartner_DeleteBuilder(
		material_management.proxies.BusinessPartner _businessPartner
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_BusinessPartner_Delete");
		builder = builder.withParam("BusinessPartner", _businessPartner);
		return builder;
	}

	public static void aCT_BusinessPartner_Delete(
		IContext context,
		material_management.proxies.BusinessPartner _businessPartner
	)
	{
		aCT_BusinessPartner_DeleteBuilder(
				_businessPartner
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/13
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/13
	 * 설명 : 거래처 수정을 위한 MF
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_BusinessPartner_EditBuilder(
		material_management.proxies.BusinessPartner _businessPartner
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_BusinessPartner_Edit");
		builder = builder.withParam("BusinessPartner", _businessPartner);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/13
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/13
	 * 설명 : 거래처 수정을 위한 MF
	 * Version 1.0 : 생성
	 */
	public static void aCT_BusinessPartner_Edit(
		IContext context,
		material_management.proxies.BusinessPartner _businessPartner
	)
	{
		aCT_BusinessPartner_EditBuilder(
				_businessPartner
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/13
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/13
	 * 설명 : 거래처 저장을 위한 MF
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_BusinessPartner_SaveBuilder(
		material_management.proxies.BusinessPartner _businessPartner
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_BusinessPartner_Save");
		builder = builder.withParam("BusinessPartner", _businessPartner);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/13
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/13
	 * 설명 : 거래처 저장을 위한 MF
	 * Version 1.0 : 생성
	 */
	public static void aCT_BusinessPartner_Save(
		IContext context,
		material_management.proxies.BusinessPartner _businessPartner
	)
	{
		aCT_BusinessPartner_SaveBuilder(
				_businessPartner
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 부서 생성 버튼
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Department_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Department_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 부서 생성 버튼
	 * Version 1.0 : 생성
	 */
	public static void aCT_Department_Create(IContext context)
	{
		aCT_Department_CreateBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 부서 삭제 버튼
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Department_DeleteBuilder(
		cmms_administration.proxies.Department _department
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Department_Delete");
		builder = builder.withParam("Department", _department);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 부서 삭제 버튼
	 * Version 1.0 : 생성
	 */
	public static void aCT_Department_Delete(
		IContext context,
		cmms_administration.proxies.Department _department
	)
	{
		aCT_Department_DeleteBuilder(
				_department
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 부서 편집 버튼
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Department_EditBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Department_Edit");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 부서 편집 버튼
	 * Version 1.0 : 생성
	 */
	public static void aCT_Department_Edit(IContext context)
	{
		aCT_Department_EditBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 선택 부서 리스트 엑셀 버튼
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Department_ExcelBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Department_Excel");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 선택 부서 리스트 엑셀 버튼
	 * Version 1.0 : 생성
	 */
	public static java.util.List<cmms_administration.proxies.Department> aCT_Department_Excel(IContext context)
	{
		Object result = aCT_Department_ExcelBuilder().execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> cmms_administration.proxies.Department.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Department_SaveBuilder(
		cmms_administration.proxies.Department _department
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Department_Save");
		builder = builder.withParam("Department", _department);
		return builder;
	}

	public static void aCT_Department_Save(
		IContext context,
		cmms_administration.proxies.Department _department
	)
	{
		aCT_Department_SaveBuilder(
				_department
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 사원 생성
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Employee_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Employee_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 사원 생성
	 * Version 1.0 : 생성
	 */
	public static void aCT_Employee_Create(IContext context)
	{
		aCT_Employee_CreateBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 사원 삭제 버튼
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Employee_DeleteBuilder(
		cmms_administration.proxies.Employee _employee
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Employee_Delete");
		builder = builder.withParam("Employee", _employee);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 사원 삭제 버튼
	 * Version 1.0 : 생성
	 */
	public static void aCT_Employee_Delete(
		IContext context,
		cmms_administration.proxies.Employee _employee
	)
	{
		aCT_Employee_DeleteBuilder(
				_employee
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 부서 편집 버튼
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Employee_EditBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Employee_Edit");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 부서 편집 버튼
	 * Version 1.0 : 생성
	 */
	public static void aCT_Employee_Edit(IContext context)
	{
		aCT_Employee_EditBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Employee_imagechangeBuilder(
		cmms_administration.proxies.Employee _employee
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Employee_imagechange");
		builder = builder.withParam("Employee", _employee);
		return builder;
	}

	public static void aCT_Employee_imagechange(
		IContext context,
		cmms_administration.proxies.Employee _employee
	)
	{
		aCT_Employee_imagechangeBuilder(
				_employee
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/10/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/10/11
	 * 설명 : employee_photo association 생성
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Employee_photoBuilder(
		cmms_administration.proxies.Employee _employee
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Employee_photo");
		builder = builder.withParam("Employee", _employee);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/10/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/10/11
	 * 설명 : employee_photo association 생성
	 * Version 1.0 : 생성
	 */
	public static cmms_administration.proxies.ProfilePhoto aCT_Employee_photo(
		IContext context,
		cmms_administration.proxies.Employee _employee
	)
	{
		Object result = aCT_Employee_photoBuilder(
				_employee
			)
			.execute(context);
		return result == null ? null : cmms_administration.proxies.ProfilePhoto.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Employee_ProfileBuilder(
		cmms_administration.proxies.Employee _employee
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Employee_Profile");
		builder = builder.withParam("Employee", _employee);
		return builder;
	}

	public static cmms_administration.proxies.ProfilePhoto aCT_Employee_Profile(
		IContext context,
		cmms_administration.proxies.Employee _employee
	)
	{
		Object result = aCT_Employee_ProfileBuilder(
				_employee
			)
			.execute(context);
		return result == null ? null : cmms_administration.proxies.ProfilePhoto.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 사원 정보 저장 버튼
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Employee_SaveBuilder(
		cmms_administration.proxies.Employee _employee
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Employee_Save");
		builder = builder.withParam("Employee", _employee);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 사원 정보 저장 버튼
	 * Version 1.0 : 생성
	 */
	public static void aCT_Employee_Save(
		IContext context,
		cmms_administration.proxies.Employee _employee
	)
	{
		aCT_Employee_SaveBuilder(
				_employee
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/10/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/10/11
	 * 설명 : employee_seal association 생성
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Employee_sealBuilder(
		cmms_administration.proxies.Employee _employee
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Employee_seal");
		builder = builder.withParam("Employee", _employee);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/10/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/10/11
	 * 설명 : employee_seal association 생성
	 * Version 1.0 : 생성
	 */
	public static cmms_administration.proxies.ProfilePhoto aCT_Employee_seal(
		IContext context,
		cmms_administration.proxies.Employee _employee
	)
	{
		Object result = aCT_Employee_sealBuilder(
				_employee
			)
			.execute(context);
		return result == null ? null : cmms_administration.proxies.ProfilePhoto.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/10/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/10/11
	 * 설명 : employee_sign association 생성
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Employee_SignBuilder(
		cmms_administration.proxies.Employee _employee
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Employee_Sign");
		builder = builder.withParam("Employee", _employee);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/10/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/10/11
	 * 설명 : employee_sign association 생성
	 * Version 1.0 : 생성
	 */
	public static cmms_administration.proxies.ProfilePhoto aCT_Employee_Sign(
		IContext context,
		cmms_administration.proxies.Employee _employee
	)
	{
		Object result = aCT_Employee_SignBuilder(
				_employee
			)
			.execute(context);
		return result == null ? null : cmms_administration.proxies.ProfilePhoto.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 김동명
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 설비종류 등록을 위한 MF
	 * 
	 * V 1.2 : 개별화 로직 적용 // 2023.09/20 김동명
	 * V 1.1 : 엔터티 위치 변경에 따른 경로 변경 // 2023/09/15 김동명
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_EquipmentLocation_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_EquipmentLocation_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 김동명
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 설비종류 등록을 위한 MF
	 * 
	 * V 1.2 : 개별화 로직 적용 // 2023.09/20 김동명
	 * V 1.1 : 엔터티 위치 변경에 따른 경로 변경 // 2023/09/15 김동명
	 * Version 1.0 : 생성
	 */
	public static void aCT_EquipmentLocation_Create(IContext context)
	{
		aCT_EquipmentLocation_CreateBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 김동명
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 설비종류 수정을 위한 MF
	 * 
	 * V 1.2 : 개별화 로직 적용
	 * V 1.1 : 엔터티 위치 변경에 따른 경로 변경 // 2023/09/15 김동명
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_EquipmentLocation_EditBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_EquipmentLocation_Edit");
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 김동명
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 설비종류 수정을 위한 MF
	 * 
	 * V 1.2 : 개별화 로직 적용
	 * V 1.1 : 엔터티 위치 변경에 따른 경로 변경 // 2023/09/15 김동명
	 * Version 1.0 : 생성
	 */
	public static void aCT_EquipmentLocation_Edit(IContext context)
	{
		aCT_EquipmentLocation_EditBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : 설비위치 저자ㅇ
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_EquipmentLocation_SaveBuilder(
		equipment_management.proxies.EquipmentLocation _equipmentLocation
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_EquipmentLocation_Save");
		builder = builder.withParam("EquipmentLocation", _equipmentLocation);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : 설비위치 저자ㅇ
	 * 
	 * Version 1.0 : 생성
	 */
	public static void aCT_EquipmentLocation_Save(
		IContext context,
		equipment_management.proxies.EquipmentLocation _equipmentLocation
	)
	{
		aCT_EquipmentLocation_SaveBuilder(
				_equipmentLocation
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 김동명
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 설비분류 등록을 위한 MF
	 * 
	 * V 1.2 : 개별화 로직 적용
	 * V 1.1 : 엔터티 위치 변경에 따른 경로 변경 // 2023/09/15 김동명
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_EquipmentType_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_EquipmentType_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 김동명
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 설비분류 등록을 위한 MF
	 * 
	 * V 1.2 : 개별화 로직 적용
	 * V 1.1 : 엔터티 위치 변경에 따른 경로 변경 // 2023/09/15 김동명
	 * Version 1.0 : 생성
	 */
	public static void aCT_EquipmentType_Create(IContext context)
	{
		aCT_EquipmentType_CreateBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 김동명
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 설비분류 수정을 위한 MF
	 * 
	 * V 1.2 : 개별화 로직 적용
	 * V 1.1 : 엔터티 위치 변경에 따른 경로 변경 // 2023/09/15 김동명
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_EquipmentType_EditBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_EquipmentType_Edit");
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 김동명
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 설비분류 수정을 위한 MF
	 * 
	 * V 1.2 : 개별화 로직 적용
	 * V 1.1 : 엔터티 위치 변경에 따른 경로 변경 // 2023/09/15 김동명
	 * Version 1.0 : 생성
	 */
	public static void aCT_EquipmentType_Edit(IContext context)
	{
		aCT_EquipmentType_EditBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : 설비위치 저자ㅇ
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_EquipmentType_SaveBuilder(
		equipment_management.proxies.EquipmentType _equipmentType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_EquipmentType_Save");
		builder = builder.withParam("EquipmentType", _equipmentType);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : 설비위치 저자ㅇ
	 * 
	 * Version 1.0 : 생성
	 */
	public static void aCT_EquipmentType_Save(
		IContext context,
		equipment_management.proxies.EquipmentType _equipmentType
	)
	{
		aCT_EquipmentType_SaveBuilder(
				_equipmentType
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 자재분류 생성
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_MaterialType_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_MaterialType_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 자재분류 생성
	 * Version 1.0 : 생성
	 */
	public static void aCT_MaterialType_Create(IContext context)
	{
		aCT_MaterialType_CreateBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_MaterialType_EditBuilder(
		material_management.proxies.MaterialType _materialType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_MaterialType_Edit");
		builder = builder.withParam("MaterialType", _materialType);
		return builder;
	}

	public static void aCT_MaterialType_Edit(
		IContext context,
		material_management.proxies.MaterialType _materialType
	)
	{
		aCT_MaterialType_EditBuilder(
				_materialType
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 자재분류 삭제
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_MatrerialType_DeleteBuilder(
		material_management.proxies.MaterialType _materialType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_MatrerialType_Delete");
		builder = builder.withParam("MaterialType", _materialType);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 자재분류 삭제
	 * Version 1.0 : 생성
	 */
	public static void aCT_MatrerialType_Delete(
		IContext context,
		material_management.proxies.MaterialType _materialType
	)
	{
		aCT_MatrerialType_DeleteBuilder(
				_materialType
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Plant_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Plant_Create");
		return builder;
	}

	public static void aCT_Plant_Create(IContext context)
	{
		aCT_Plant_CreateBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Plant_DeleteBuilder(
		cmms_administration.proxies.Plant _plant
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Plant_Delete");
		builder = builder.withParam("Plant", _plant);
		return builder;
	}

	public static void aCT_Plant_Delete(
		IContext context,
		cmms_administration.proxies.Plant _plant
	)
	{
		aCT_Plant_DeleteBuilder(
				_plant
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_PlanttoDepartmentTree_DepartmentBuilder(
		cmms_administration.proxies.Plant _plant
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_PlanttoDepartmentTree_Department");
		builder = builder.withParam("Plant", _plant);
		return builder;
	}

	public static java.util.List<cmms_administration.proxies.Department> aCT_PlanttoDepartmentTree_Department(
		IContext context,
		cmms_administration.proxies.Plant _plant
	)
	{
		Object result = aCT_PlanttoDepartmentTree_DepartmentBuilder(
				_plant
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> cmms_administration.proxies.Department.initialize(context, obj));
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/10/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/10/11
	 * 설명 : 공장에 따른 직원 리스트 불러오기
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_PlanttoDepartmentTree_EmployeeBuilder(
		cmms_administration.proxies.Plant _plant
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_PlanttoDepartmentTree_Employee");
		builder = builder.withParam("Plant", _plant);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/10/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/10/11
	 * 설명 : 공장에 따른 직원 리스트 불러오기
	 * Version 1.0 : 생성
	 */
	public static java.util.List<cmms_administration.proxies.Department> aCT_PlanttoDepartmentTree_Employee(
		IContext context,
		cmms_administration.proxies.Plant _plant
	)
	{
		Object result = aCT_PlanttoDepartmentTree_EmployeeBuilder(
				_plant
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> cmms_administration.proxies.Department.initialize(context, obj));
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/01
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/01
	 * 설명 : 기준코드 데이터의 사용여부를 설정해서 저장하는 로직
	 * 데이터 그리드의 Active 체크박스 클릭 시 호출된다.
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Standard_Code_ActiveBuilder(
		commons.proxies.StandardCode _standardCode
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Standard_Code_Active");
		builder = builder.withParam("StandardCode", _standardCode);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/01
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/01
	 * 설명 : 기준코드 데이터의 사용여부를 설정해서 저장하는 로직
	 * 데이터 그리드의 Active 체크박스 클릭 시 호출된다.
	 * Version 1.0 : 생성
	 */
	public static void aCT_Standard_Code_Active(
		IContext context,
		commons.proxies.StandardCode _standardCode
	)
	{
		aCT_Standard_Code_ActiveBuilder(
				_standardCode
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/01
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/10/06
	 * 설명 : 기준코드 데이터의 New / Edit 저장하는 로직으로 코드타입에 현재 선택된 코드 타입을자동으로 설정하고 새로운 코드의 경우 Sequence는 전체 카운트 +1로 자동 설정해준다.
	 * Version 1.1 : 기준코드 엔터티 타입별로 Split하는 서브 MF 로직 삭제
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Standard_Code_CommitBuilder(
		commons.proxies.StandardCode _standardCode,
		commons.proxies.CodeType _codeType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Standard_Code_Commit");
		builder = builder.withParam("StandardCode", _standardCode);
		builder = builder.withParam("CodeType", _codeType);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/01
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/10/06
	 * 설명 : 기준코드 데이터의 New / Edit 저장하는 로직으로 코드타입에 현재 선택된 코드 타입을자동으로 설정하고 새로운 코드의 경우 Sequence는 전체 카운트 +1로 자동 설정해준다.
	 * Version 1.1 : 기준코드 엔터티 타입별로 Split하는 서브 MF 로직 삭제
	 * Version 1.0 : 생성
	 */
	public static void aCT_Standard_Code_Commit(
		IContext context,
		commons.proxies.StandardCode _standardCode,
		commons.proxies.CodeType _codeType
	)
	{
		aCT_Standard_Code_CommitBuilder(
				_standardCode,
				_codeType
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Standard_Code_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Standard_Code_Create");
		return builder;
	}

	public static void aCT_Standard_Code_Create(IContext context)
	{
		aCT_Standard_Code_CreateBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/04
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/04
	 * 설명 : 기준코드 데이터의 사용 여부를 Deactive 하는 로직이다.
	 * Deactive 버튼 클릭시 호출된다.
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Standard_Code_DeActiveBuilder(
		commons.proxies.StandardCode _standardCode
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Standard_Code_DeActive");
		builder = builder.withParam("StandardCode", _standardCode);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/04
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/04
	 * 설명 : 기준코드 데이터의 사용 여부를 Deactive 하는 로직이다.
	 * Deactive 버튼 클릭시 호출된다.
	 * Version 1.0 : 생성
	 */
	public static void aCT_Standard_Code_DeActive(
		IContext context,
		commons.proxies.StandardCode _standardCode
	)
	{
		aCT_Standard_Code_DeActiveBuilder(
				_standardCode
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Standard_Code_EditBuilder(
		commons.proxies.StandardCode _standardCode
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Standard_Code_Edit");
		builder = builder.withParam("StandardCode", _standardCode);
		return builder;
	}

	public static void aCT_Standard_Code_Edit(
		IContext context,
		commons.proxies.StandardCode _standardCode
	)
	{
		aCT_Standard_Code_EditBuilder(
				_standardCode
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Standard_Code_Equipment_DummyBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Standard_Code_Equipment_Dummy");
		return builder;
	}

	public static void aCT_Standard_Code_Equipment_Dummy(IContext context)
	{
		aCT_Standard_Code_Equipment_DummyBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Standard_Code_Plant_DummyBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Standard_Code_Plant_Dummy");
		return builder;
	}

	public static void aCT_Standard_Code_Plant_Dummy(IContext context)
	{
		aCT_Standard_Code_Plant_DummyBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/04
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/04
	 * 설명 : 기준코드 데이터의 순서(Sequence)를 하나 증가하고 다음 코드의 순서를 하나 내린다.
	 * 데이터 그리드의 Order 컬럼 +버튼 클릭 시 호출된다.
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Standard_Code_Sequence_IncreaseBuilder(
		commons.proxies.StandardCode _standardCode,
		commons.proxies.CodeType _codeType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Standard_Code_Sequence_Increase");
		builder = builder.withParam("StandardCode", _standardCode);
		builder = builder.withParam("CodeType", _codeType);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/04
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/04
	 * 설명 : 기준코드 데이터의 순서(Sequence)를 하나 증가하고 다음 코드의 순서를 하나 내린다.
	 * 데이터 그리드의 Order 컬럼 +버튼 클릭 시 호출된다.
	 * Version 1.0 : 생성
	 */
	public static void aCT_Standard_Code_Sequence_Increase(
		IContext context,
		commons.proxies.StandardCode _standardCode,
		commons.proxies.CodeType _codeType
	)
	{
		aCT_Standard_Code_Sequence_IncreaseBuilder(
				_standardCode,
				_codeType
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/04
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/04
	 * 설명 : 기준코드 데이터의 순서(Sequence)를 하나 감소하고 이전 코드의 순서를 하나 올린다.
	 * 데이터 그리드의 Order 컬럼 -버튼 클릭 시 호출된다.
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Standard_Code_SequenceDecreaseBuilder(
		commons.proxies.StandardCode _standardCode,
		commons.proxies.CodeType _codeType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Standard_Code_SequenceDecrease");
		builder = builder.withParam("StandardCode", _standardCode);
		builder = builder.withParam("CodeType", _codeType);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/04
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/04
	 * 설명 : 기준코드 데이터의 순서(Sequence)를 하나 감소하고 이전 코드의 순서를 하나 올린다.
	 * 데이터 그리드의 Order 컬럼 -버튼 클릭 시 호출된다.
	 * Version 1.0 : 생성
	 */
	public static void aCT_Standard_Code_SequenceDecrease(
		IContext context,
		commons.proxies.StandardCode _standardCode,
		commons.proxies.CodeType _codeType
	)
	{
		aCT_Standard_Code_SequenceDecreaseBuilder(
				_standardCode,
				_codeType
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Standard_Code_User_DummyBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Standard_Code_User_Dummy");
		return builder;
	}

	public static void aCT_Standard_Code_User_Dummy(IContext context)
	{
		aCT_Standard_Code_User_DummyBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 사원 생성
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_User_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_User_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 사원 생성
	 * Version 1.0 : 생성
	 */
	public static void aCT_User_Create(IContext context)
	{
		aCT_User_CreateBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 사원 삭제 버튼
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_User_DeleteBuilder(
		administration.proxies.Account _account
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_User_Delete");
		builder = builder.withParam("Account", _account);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 사원 삭제 버튼
	 * Version 1.0 : 생성
	 */
	public static void aCT_User_Delete(
		IContext context,
		administration.proxies.Account _account
	)
	{
		aCT_User_DeleteBuilder(
				_account
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_User_EditBuilder(
		administration.proxies.Account _account
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_User_Edit");
		builder = builder.withParam("Account", _account);
		return builder;
	}

	public static void aCT_User_Edit(
		IContext context,
		administration.proxies.Account _account
	)
	{
		aCT_User_EditBuilder(
				_account
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 선택된 해당사원
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_User_EmployeepickBuilder(
		cmms_administration.proxies.Employee _employee,
		administration.proxies.AccountPasswordData _accountPasswordData,
		administration.proxies.Account _account
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_User_Employeepick");
		builder = builder.withParam("Employee", _employee);
		builder = builder.withParam("AccountPasswordData", _accountPasswordData);
		builder = builder.withParam("Account", _account);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 선택된 해당사원
	 * Version 1.0 : 생성
	 */
	public static void aCT_User_Employeepick(
		IContext context,
		cmms_administration.proxies.Employee _employee,
		administration.proxies.AccountPasswordData _accountPasswordData,
		administration.proxies.Account _account
	)
	{
		aCT_User_EmployeepickBuilder(
				_employee,
				_accountPasswordData,
				_account
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 박재훈
	 * 최종 수정일 : 2023/10/04
	 * 설명 : 사용자 Save 버튼 
	 * Version 1.0 : 생성
	 * 변경: 표준코드를 사용하여 System.UserRole에 따른 한국어 불러옴
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_User_SaveNewAccountBuilder(
		administration.proxies.AccountPasswordData _accountPasswordData
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_User_SaveNewAccount");
		builder = builder.withParam("AccountPasswordData", _accountPasswordData);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 박재훈
	 * 최종 수정일 : 2023/10/04
	 * 설명 : 사용자 Save 버튼 
	 * Version 1.0 : 생성
	 * 변경: 표준코드를 사용하여 System.UserRole에 따른 한국어 불러옴
	 */
	public static void aCT_User_SaveNewAccount(
		IContext context,
		administration.proxies.AccountPasswordData _accountPasswordData
	)
	{
		aCT_User_SaveNewAccountBuilder(
				_accountPasswordData
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 창고 등록을 위한 MF
	 * 
	 * V 1.1 : 개별화 로직 적용
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Warahouse_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Warahouse_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 창고 등록을 위한 MF
	 * 
	 * V 1.1 : 개별화 로직 적용
	 * Version 1.0 : 생성
	 */
	public static void aCT_Warahouse_Create(IContext context)
	{
		aCT_Warahouse_CreateBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 창고 수정을 위한 MF
	 * 
	 * V 1.1 : 개별화 로직 적용
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Warahouse_EditBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.ACT_Warahouse_Edit");
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 창고 수정을 위한 MF
	 * 
	 * V 1.1 : 개별화 로직 적용
	 * Version 1.0 : 생성
	 */
	public static void aCT_Warahouse_Edit(IContext context)
	{
		aCT_Warahouse_EditBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/04
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/04
	 * 설명 : CodeType에 포함된 기준코드(StandardCode)의 개수 계산하여 반환한다.
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder cAL_Code_Type_CountBuilder(
		commons.proxies.CodeType _codeType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.CAL_Code_Type_Count");
		builder = builder.withParam("CodeType", _codeType);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/04
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/04
	 * 설명 : CodeType에 포함된 기준코드(StandardCode)의 개수 계산하여 반환한다.
	 * Version 1.0 : 생성
	 */
	public static cmms_administration.proxies.TotalCount cAL_Code_Type_Count(
		IContext context,
		commons.proxies.CodeType _codeType
	)
	{
		Object result = cAL_Code_Type_CountBuilder(
				_codeType
			)
			.execute(context);
		return result == null ? null : cmms_administration.proxies.TotalCount.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 부서 Common pass parameter
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder department_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.Department_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 부서 Common pass parameter
	 * Version 1.0 : 생성
	 */
	public static cmms_administration.proxies.Department department_Create(IContext context)
	{
		Object result = department_CreateBuilder().execute(context);
		return result == null ? null : cmms_administration.proxies.Department.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Code_Type_Helper_RetrieveBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_Code_Type_Helper_Retrieve");
		return builder;
	}

	public static commons.proxies.CodeTypeHelper dS_Code_Type_Helper_Retrieve(IContext context)
	{
		Object result = dS_Code_Type_Helper_RetrieveBuilder().execute(context);
		return result == null ? null : commons.proxies.CodeTypeHelper.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Company_materialBuilder(
		commons.proxies.Company _company
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_Company_material");
		builder = builder.withParam("Company", _company);
		return builder;
	}

	public static java.util.List<commons.proxies.Company> dS_Company_material(
		IContext context,
		commons.proxies.Company _company
	)
	{
		Object result = dS_Company_materialBuilder(
				_company
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> commons.proxies.Company.initialize(context, obj));
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 회사클릭 시 모든 자재분류 리스트
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Company_MaterialTypeBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_Company_MaterialType");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 회사클릭 시 모든 자재분류 리스트
	 * Version 1.0 : 생성
	 */
	public static void dS_Company_MaterialType(IContext context)
	{
		dS_Company_MaterialTypeBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Department_UpperdepartmentBuilder(
		cmms_administration.proxies.Department _department
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_Department_Upperdepartment");
		builder = builder.withParam("Department", _department);
		return builder;
	}

	public static java.util.List<cmms_administration.proxies.Department> dS_Department_Upperdepartment(
		IContext context,
		cmms_administration.proxies.Department _department
	)
	{
		Object result = dS_Department_UpperdepartmentBuilder(
				_department
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> cmms_administration.proxies.Department.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Employee_DepartmentBuilder(
		cmms_administration.proxies.Employee _employee
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_Employee_Department");
		builder = builder.withParam("Employee", _employee);
		return builder;
	}

	public static java.util.List<cmms_administration.proxies.Department> dS_Employee_Department(
		IContext context,
		cmms_administration.proxies.Employee _employee
	)
	{
		Object result = dS_Employee_DepartmentBuilder(
				_employee
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> cmms_administration.proxies.Department.initialize(context, obj));
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/10/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/10/11
	 * 설명 : imageset 이동
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Employee_PictureBuilder(
		cmms_administration.proxies.Employee _employee_2
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_Employee_Picture");
		builder = builder.withParam("Employee_2", _employee_2);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/10/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/10/11
	 * 설명 : imageset 이동
	 * Version 1.0 : 생성
	 */
	public static void dS_Employee_Picture(
		IContext context,
		cmms_administration.proxies.Employee _employee_2
	)
	{
		dS_Employee_PictureBuilder(
				_employee_2
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Employee_SelectNodeDpartmentBuilder(
		cmms_administration.proxies.Department _department
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_Employee_SelectNodeDpartment");
		builder = builder.withParam("Department", _department);
		return builder;
	}

	public static void dS_Employee_SelectNodeDpartment(
		IContext context,
		cmms_administration.proxies.Department _department
	)
	{
		dS_Employee_SelectNodeDpartmentBuilder(
				_department
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_EmployeePhotoBuilder(
		cmms_administration.proxies.Employee _employee
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_EmployeePhoto");
		builder = builder.withParam("Employee", _employee);
		return builder;
	}

	public static java.util.List<cmms_administration.proxies.ProfilePhoto> dS_EmployeePhoto(
		IContext context,
		cmms_administration.proxies.Employee _employee
	)
	{
		Object result = dS_EmployeePhotoBuilder(
				_employee
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> cmms_administration.proxies.ProfilePhoto.initialize(context, obj));
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : EquipmentLocation tree를 위한 DS MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_EquipmentLocation_TreeviewBuilder(
		cmms_administration.proxies.Plant _plant
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_EquipmentLocation_Treeview");
		builder = builder.withParam("Plant", _plant);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : EquipmentLocation tree를 위한 DS MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static java.util.List<equipment_management.proxies.EquipmentLocation> dS_EquipmentLocation_Treeview(
		IContext context,
		cmms_administration.proxies.Plant _plant
	)
	{
		Object result = dS_EquipmentLocation_TreeviewBuilder(
				_plant
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> equipment_management.proxies.EquipmentLocation.initialize(context, obj));
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/11
	 * 설명 : Treeview에 사용 될 DS
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_EquipmentType_TreeviewBuilder(
		commons.proxies.Company _company
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_EquipmentType_Treeview");
		builder = builder.withParam("Company", _company);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/11
	 * 설명 : Treeview에 사용 될 DS
	 * Version 1.0 : 생성
	 */
	public static java.util.List<equipment_management.proxies.EquipmentType> dS_EquipmentType_Treeview(
		IContext context,
		commons.proxies.Company _company
	)
	{
		Object result = dS_EquipmentType_TreeviewBuilder(
				_company
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> equipment_management.proxies.EquipmentType.initialize(context, obj));
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 자재 분류 트리노트 클릭시 해당 자재분류 리스트
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Materialtype_selectnodeBuilder(
		material_management.proxies.MaterialType _materialType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_Materialtype_selectnode");
		builder = builder.withParam("MaterialType", _materialType);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 자재 분류 트리노트 클릭시 해당 자재분류 리스트
	 * Version 1.0 : 생성
	 */
	public static void dS_Materialtype_selectnode(
		IContext context,
		material_management.proxies.MaterialType _materialType
	)
	{
		dS_Materialtype_selectnodeBuilder(
				_materialType
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 자재분류 트리
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Materialtype_treeBuilder(
		commons.proxies.Company _company
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_Materialtype_tree");
		builder = builder.withParam("Company", _company);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 자재분류 트리
	 * Version 1.0 : 생성
	 */
	public static java.util.List<material_management.proxies.MaterialType> dS_Materialtype_tree(
		IContext context,
		commons.proxies.Company _company
	)
	{
		Object result = dS_Materialtype_treeBuilder(
				_company
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> material_management.proxies.MaterialType.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_plant_DepartmentBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_plant_Department");
		return builder;
	}

	public static java.util.List<cmms_administration.proxies.Plant> dS_plant_Department(IContext context)
	{
		Object result = dS_plant_DepartmentBuilder().execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> cmms_administration.proxies.Plant.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_selectnode_plant_DepartmentBuilder(
		cmms_administration.proxies.Plant _plant
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_selectnode_plant_Department");
		builder = builder.withParam("Plant", _plant);
		return builder;
	}

	public static void dS_selectnode_plant_Department(
		IContext context,
		cmms_administration.proxies.Plant _plant
	)
	{
		dS_selectnode_plant_DepartmentBuilder(
				_plant
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 공장트리 노드 선택 사원페이지 오픈
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_selectnode_plant_EmployeeBuilder(
		cmms_administration.proxies.Plant _plant
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_selectnode_plant_Employee");
		builder = builder.withParam("Plant", _plant);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 공장트리 노드 선택 사원페이지 오픈
	 * 
	 * Version 1.0 : 생성
	 */
	public static void dS_selectnode_plant_Employee(
		IContext context,
		cmms_administration.proxies.Plant _plant
	)
	{
		dS_selectnode_plant_EmployeeBuilder(
				_plant
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 부서 트리 노드 선택
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_SelectNodeMake_DepartmentBuilder(
		cmms_administration.proxies.Department _department
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_SelectNodeMake_Department");
		builder = builder.withParam("Department", _department);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 부서 트리 노드 선택
	 * Version 1.0 : 생성
	 */
	public static void dS_SelectNodeMake_Department(
		IContext context,
		cmms_administration.proxies.Department _department
	)
	{
		dS_SelectNodeMake_DepartmentBuilder(
				_department
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 부서 트리 노드 선택 사원페이지 오픈
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_SelectNodeMake_EmployeeBuilder(
		cmms_administration.proxies.Department _department
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_SelectNodeMake_Employee");
		builder = builder.withParam("Department", _department);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : 부서 트리 노드 선택 사원페이지 오픈
	 * 
	 * Version 1.0 : 생성
	 */
	public static void dS_SelectNodeMake_Employee(
		IContext context,
		cmms_administration.proxies.Department _department
	)
	{
		dS_SelectNodeMake_EmployeeBuilder(
				_department
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 하위부서 선택 데이터 뷰
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_SubDepartmentBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_SubDepartment");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/08
	 * 설명 : 하위부서 선택 데이터 뷰
	 * Version 1.0 : 생성
	 */
	public static cmms_administration.proxies.SubDepartment dS_SubDepartment(IContext context)
	{
		Object result = dS_SubDepartmentBuilder().execute(context);
		return result == null ? null : cmms_administration.proxies.SubDepartment.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/06
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/06
	 * 설명 : WarehouseTreeview에 사용 될 DS
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Warahouse_TreeviewBuilder(
		commons.proxies.Company _company
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.DS_Warahouse_Treeview");
		builder = builder.withParam("Company", _company);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/06
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/06
	 * 설명 : WarehouseTreeview에 사용 될 DS
	 * Version 1.0 : 생성
	 */
	public static java.util.List<material_management.proxies.WareHouse> dS_Warahouse_Treeview(
		IContext context,
		commons.proxies.Company _company
	)
	{
		Object result = dS_Warahouse_TreeviewBuilder(
				_company
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> material_management.proxies.WareHouse.initialize(context, obj));
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : Pass parameter 사원 정보
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder employee_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.Employee_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : Pass parameter 사원 정보
	 * Version 1.0 : 생성
	 */
	public static cmms_administration.proxies.Employee employee_Create(IContext context)
	{
		Object result = employee_CreateBuilder().execute(context);
		return result == null ? null : cmms_administration.proxies.Employee.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 삭제 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentLocationHelper_DeleteBuilder(
		administration.proxies.Account _account
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.EquipmentLocationHelper_Delete");
		builder = builder.withParam("Account", _account);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 삭제 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static void equipmentLocationHelper_Delete(
		IContext context,
		administration.proxies.Account _account
	)
	{
		equipmentLocationHelper_DeleteBuilder(
				_account
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 생성 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentTypeHelper_Child_CreateBuilder(
		administration.proxies.Account _currentUser
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.EquipmentTypeHelper_Child_Create");
		builder = builder.withParam("CurrentUser", _currentUser);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 생성 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static equipment_management.proxies.EquipmentTypehelper_Child equipmentTypeHelper_Child_Create(
		IContext context,
		administration.proxies.Account _currentUser
	)
	{
		Object result = equipmentTypeHelper_Child_CreateBuilder(
				_currentUser
			)
			.execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentTypehelper_Child.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 생성 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentTypeHelper_CreateBuilder(
		administration.proxies.Account _currentUser
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.EquipmentTypeHelper_Create");
		builder = builder.withParam("CurrentUser", _currentUser);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 생성 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static equipment_management.proxies.EquipmentTypeHelper equipmentTypeHelper_Create(
		IContext context,
		administration.proxies.Account _currentUser
	)
	{
		Object result = equipmentTypeHelper_CreateBuilder(
				_currentUser
			)
			.execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentTypeHelper.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 삭제 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentTypeHelper_DeleteBuilder(
		administration.proxies.Account _account
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.EquipmentTypeHelper_Delete");
		builder = builder.withParam("Account", _account);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 삭제 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static void equipmentTypeHelper_Delete(
		IContext context,
		administration.proxies.Account _account
	)
	{
		equipmentTypeHelper_DeleteBuilder(
				_account
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 자재분류 parameter pass
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder materialType_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.MaterialType_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 자재분류 parameter pass
	 * Version 1.0 : 생성
	 */
	public static material_management.proxies.MaterialType materialType_Create(IContext context)
	{
		Object result = materialType_CreateBuilder().execute(context);
		return result == null ? null : material_management.proxies.MaterialType.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder microflowBuilder(
		cmms_administration.proxies.Plant _plant
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.Microflow");
		builder = builder.withParam("Plant", _plant);
		return builder;
	}

	public static java.util.List<cmms_administration.proxies.Department> microflow(
		IContext context,
		cmms_administration.proxies.Plant _plant
	)
	{
		Object result = microflowBuilder(
				_plant
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> cmms_administration.proxies.Department.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCK_Code_Type_SelectBuilder(
		commons.proxies.CodeType _codeType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.OCK_Code_Type_Select");
		builder = builder.withParam("CodeType", _codeType);
		return builder;
	}

	public static void oCK_Code_Type_Select(
		IContext context,
		commons.proxies.CodeType _codeType
	)
	{
		oCK_Code_Type_SelectBuilder(
				_codeType
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCK_EquipmentLocationTreeview_NodeBuilder(
		equipment_management.proxies.EquipmentLocation _equipmentLocation
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.OCK_EquipmentLocationTreeview_Node");
		builder = builder.withParam("EquipmentLocation", _equipmentLocation);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용
	 * Version 1.0 : 생성
	 */
	public static void oCK_EquipmentLocationTreeview_Node(
		IContext context,
		equipment_management.proxies.EquipmentLocation _equipmentLocation
	)
	{
		oCK_EquipmentLocationTreeview_NodeBuilder(
				_equipmentLocation
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCK_EquipmentLocationTreeview_Node_PlantBuilder(
		cmms_administration.proxies.Plant _plant
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.OCK_EquipmentLocationTreeview_Node_Plant");
		builder = builder.withParam("Plant", _plant);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용
	 * Version 1.0 : 생성
	 */
	public static void oCK_EquipmentLocationTreeview_Node_Plant(
		IContext context,
		cmms_administration.proxies.Plant _plant
	)
	{
		oCK_EquipmentLocationTreeview_Node_PlantBuilder(
				_plant
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 김동명
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.2 : 개별화 로직 적용
	 * V 1.1 : 엔터티 위치 변경에 따른 경로 변경 // 2023/09/15 김동명
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCK_EquipmentType_Treeview_NodeBuilder(
		equipment_management.proxies.EquipmentType _equipmentType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.OCK_EquipmentType_Treeview_Node");
		builder = builder.withParam("EquipmentType", _equipmentType);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 김동명
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.2 : 개별화 로직 적용
	 * V 1.1 : 엔터티 위치 변경에 따른 경로 변경 // 2023/09/15 김동명
	 * Version 1.0 : 생성
	 */
	public static void oCK_EquipmentType_Treeview_Node(
		IContext context,
		equipment_management.proxies.EquipmentType _equipmentType
	)
	{
		oCK_EquipmentType_Treeview_NodeBuilder(
				_equipmentType
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/10
	 * 최종 수정자 : 김동명
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.2 : 개별화 로직 적용
	 * V 1.1 : 엔터티 위치 변경에 따른 경로 변경 // 2023/09/15 김동명
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCK_EquipmentType_Treeview_Node_CompanyBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.OCK_EquipmentType_Treeview_Node_Company");
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/10
	 * 최종 수정자 : 김동명
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.2 : 개별화 로직 적용
	 * V 1.1 : 엔터티 위치 변경에 따른 경로 변경 // 2023/09/15 김동명
	 * Version 1.0 : 생성
	 */
	public static void oCK_EquipmentType_Treeview_Node_Company(IContext context)
	{
		oCK_EquipmentType_Treeview_Node_CompanyBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCK_WarehouseTreeview_NodeBuilder(
		material_management.proxies.WareHouse _wareHouse
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.OCK_WarehouseTreeview_Node");
		builder = builder.withParam("WareHouse", _wareHouse);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용
	 * Version 1.0 : 생성
	 */
	public static void oCK_WarehouseTreeview_Node(
		IContext context,
		material_management.proxies.WareHouse _wareHouse
	)
	{
		oCK_WarehouseTreeview_NodeBuilder(
				_wareHouse
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/13
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCK_WarehouseTreeview_Node_CompanyBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.OCK_WarehouseTreeview_Node_Company");
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/13
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용
	 * Version 1.0 : 생성
	 */
	public static void oCK_WarehouseTreeview_Node_Company(IContext context)
	{
		oCK_WarehouseTreeview_Node_CompanyBuilder().execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder plant_Code_NumberingBuilder(
		cmms_administration.proxies.Plant _plant
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.Plant_Code_Numbering");
		builder = builder.withParam("Plant", _plant);
		return builder;
	}

	public static cmms_administration.proxies.Plant plant_Code_Numbering(
		IContext context,
		cmms_administration.proxies.Plant _plant
	)
	{
		Object result = plant_Code_NumberingBuilder(
				_plant
			)
			.execute(context);
		return result == null ? null : cmms_administration.proxies.Plant.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder plant_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.Plant_Create");
		return builder;
	}

	public static cmms_administration.proxies.Plant plant_Create(IContext context)
	{
		Object result = plant_CreateBuilder().execute(context);
		return result == null ? null : cmms_administration.proxies.Plant.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : Pass parameter 사원 정보
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder user_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.User_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/09/12
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/12
	 * 설명 : Pass parameter 사원 정보
	 * Version 1.0 : 생성
	 */
	public static cmms_administration.proxies.User user_Create(IContext context)
	{
		Object result = user_CreateBuilder().execute(context);
		return result == null ? null : cmms_administration.proxies.User.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 생성 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder warehouseHelper_Child_CreateBuilder(
		administration.proxies.Account _currentUser
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.WarehouseHelper_Child_Create");
		builder = builder.withParam("CurrentUser", _currentUser);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 생성 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static material_management.proxies.WareHouseTreeHelper_Child warehouseHelper_Child_Create(
		IContext context,
		administration.proxies.Account _currentUser
	)
	{
		Object result = warehouseHelper_Child_CreateBuilder(
				_currentUser
			)
			.execute(context);
		return result == null ? null : material_management.proxies.WareHouseTreeHelper_Child.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 삭제 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder wareHouseHelper_DeleteBuilder(
		administration.proxies.Account _currentUser
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.WareHouseHelper_Delete");
		builder = builder.withParam("CurrentUser", _currentUser);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 삭제 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static void wareHouseHelper_Delete(
		IContext context,
		administration.proxies.Account _currentUser
	)
	{
		wareHouseHelper_DeleteBuilder(
				_currentUser
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 생성 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder warehouserHelper_CreateBuilder(
		administration.proxies.Account _currentUser
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("CMMS_Administration.WarehouserHelper_Create");
		builder = builder.withParam("CurrentUser", _currentUser);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 생성 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static material_management.proxies.WareHouseTreeHelper warehouserHelper_Create(
		IContext context,
		administration.proxies.Account _currentUser
	)
	{
		Object result = warehouserHelper_CreateBuilder(
				_currentUser
			)
			.execute(context);
		return result == null ? null : material_management.proxies.WareHouseTreeHelper.initialize(context, (IMendixObject) result);
	}
}
