// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package globalsearch.actions;

import java.util.ArrayList;
import java.util.List;
import org.apache.lucene.facet.DrillDownQuery;
import org.apache.lucene.facet.FacetsConfig;
import org.apache.lucene.index.DirectoryReader;
import org.apache.lucene.index.IndexReader;
import org.apache.lucene.search.IndexSearcher;
import org.apache.lucene.search.Query;
import org.apache.lucene.store.FSDirectory;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import globalsearch.proxies.FacetResult;
import globalsearch.supportfunctions.DirectoryCreator;
import globalsearch.supportfunctions.QueryHelper;
import globalsearch.supportfunctions.SearchHelper;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * This action can be used to drill down a faceted search.
 */
public class DrillDownSearch extends CustomJavaAction<java.util.List<IMendixObject>>
{
	/** @deprecated use SearchObject.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __SearchObject;
	private final globalsearch.proxies.Searcher SearchObject;
	/** @deprecated use com.mendix.utils.ListUtils.map(FacetList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __FacetList;
	private final java.util.List<globalsearch.proxies.FacetResult> FacetList;

	public DrillDownSearch(
		IContext context,
		IMendixObject _searchObject,
		java.util.List<IMendixObject> _facetList
	)
	{
		super(context);
		this.__SearchObject = _searchObject;
		this.SearchObject = _searchObject == null ? null : globalsearch.proxies.Searcher.initialize(getContext(), _searchObject);
		this.__FacetList = _facetList;
		this.FacetList = java.util.Optional.ofNullable(_facetList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(facetListElement -> globalsearch.proxies.FacetResult.initialize(getContext(), facetListElement))
			.collect(java.util.stream.Collectors.toList());
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		// BEGIN USER CODE
		FacetsConfig config = new FacetsConfig();
		List<String> facetNames = new ArrayList<String>();
		for(FacetResult i : FacetList) {
			String name = i.getFacetResult_FilterResult().getName();
			if(facetNames.contains(name)) continue;
			facetNames.add(name);
			config.setMultiValued(name, true);
		}
		
		// Create directory and instantiate reader and seacher.
		String searchString = SearchObject.getSearchString();
		
		// Create directory and instantiate reader and seacher.
		FSDirectory indexDir = DirectoryCreator.create();		
		IndexReader reader = DirectoryReader.open(indexDir);
		
		IndexSearcher searcher = new IndexSearcher(reader);
		Query parsedquery = QueryHelper.getQuery(searchString, SearchObject.getSearchType());
		
		// Create query
		DrillDownQuery query = new DrillDownQuery(config, parsedquery);
		for(FacetResult facet : FacetList) {
			String facetName = facet.getFacetResult_FilterResult().getName();
			String facetValue = facet.getName();
			query.add(facetName, facetValue);
		}
		
		return SearchHelper.performSearch(SearchObject, searcher, query, this.getContext());
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "DrillDownSearch";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
