// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package globalsearch.actions;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Path;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import globalsearch.supportfunctions.DirectoryCreator;

public class FileDocumentToIndexData extends CustomJavaAction<java.lang.Boolean>
{
	/** @deprecated use IndexZipData.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __IndexZipData;
	private final globalsearch.proxies.IndexZipData IndexZipData;

	public FileDocumentToIndexData(
		IContext context,
		IMendixObject _indexZipData
	)
	{
		super(context);
		this.__IndexZipData = _indexZipData;
		this.IndexZipData = _indexZipData == null ? null : globalsearch.proxies.IndexZipData.initialize(getContext(), _indexZipData);
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		InputStream zippedStream = Core.getFileDocumentContent(getContext(), __IndexZipData);
		 
		String outputpath = DirectoryCreator.getDirectory();
		
		unzip(zippedStream,outputpath);
		
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "FileDocumentToIndexData";
	}

	// BEGIN EXTRA CODE
	
	public static void unzip(InputStream zippedStream, String outputPath) throws IOException {
	    try (ZipInputStream zipInputStream = new ZipInputStream(zippedStream)) {
	        ZipEntry entry;
	        while ((entry = zipInputStream.getNextEntry()) != null) {
	            File file = new File(outputPath, entry.getName());
	            if (entry.isDirectory()) {
	                file.mkdirs();
	            } else {
	                file.getParentFile().mkdirs();
	                try (FileOutputStream fos = new FileOutputStream(file)) {
	                    byte[] buffer = new byte[1024];
	                    int len;
	                    while ((len = zipInputStream.read(buffer)) > 0) {
	                        fos.write(buffer, 0, len);
	                    }
	                }
	                catch (IOException e) {
	                	//this throws the flow that calls this action in an error state and with proper use should not delete the indexed data in its zipped state.
	                }
	            }
	            zipInputStream.closeEntry();
	        }
	    }
	}
	
	
	// END EXTRA CODE
}
