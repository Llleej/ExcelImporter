// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package globalsearch.actions;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.FileVisitOption;
import java.nio.file.FileVisitResult;
import java.nio.file.FileVisitor;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import globalsearch.supportfunctions.DirectoryCreator;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import globalsearch.proxies.IndexZipData;

public class IndexDataToFileDocument extends CustomJavaAction<IMendixObject>
{
	public IndexDataToFileDocument(IContext context)
	{
		super(context);
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		String subFolderLocation = DirectoryCreator.getDirectory();
		String fileSep = System.getProperty("file.separator");
		String zipFileLocation = new File(System.getProperty("java.io.tmpdir")).getParent() + fileSep+ "zipdata.zip";
		
		Path subFolderPath = Path.of(subFolderLocation);
		Path zipFilePath = Path.of(zipFileLocation); 
		
		zipFolder(subFolderPath, zipFilePath);
		
		IndexZipData indexdata = new IndexZipData(getContext());
		
	
		FileInputStream is = new FileInputStream(zipFileLocation);
		Core.storeFileDocumentContent(getContext(), indexdata.getMendixObject(),is);
		
		
		Files.delete(zipFilePath);
		//Delete the file to prevent disk clutter.
		
		return indexdata.getMendixObject();
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "IndexDataToFileDocument";
	}

	// BEGIN EXTRA CODE
	 public static void zipFolder(Path sourceFolderPath, Path zipFilePath) throws IOException {
	        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(zipFilePath.toFile()))) {
	            Files.walkFileTree(sourceFolderPath, EnumSet.noneOf(FileVisitOption.class), Integer.MAX_VALUE,
	                    new FileVisitor<Path>() {
	                        @Override
	                        public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)
	                                throws IOException {
	                            zos.putNextEntry(new ZipEntry(sourceFolderPath.relativize(dir).toString() + "/"));
	                            zos.closeEntry();
	                            return FileVisitResult.CONTINUE;
	                        }

	                        @Override
	                        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {
	                            try (FileInputStream fis = new FileInputStream(file.toFile())) {
	                                ZipEntry zipEntry = new ZipEntry(sourceFolderPath.relativize(file).toString());
	                                zos.putNextEntry(zipEntry);
	                                byte[] bytes = new byte[1024];
	                                int length;
	                                while ((length = fis.read(bytes)) >= 0) {
	                                    zos.write(bytes, 0, length);
	                                }
	                                zos.closeEntry();
	                            }
	                            return FileVisitResult.CONTINUE;
	                        }

	                        @Override
	                        public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {
	                            System.err.printf("Skipped %s due to error: %s%n", file, exc);
	                            return FileVisitResult.CONTINUE;
	                        }

	                        @Override
	                        public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {
	                            return FileVisitResult.CONTINUE;
	                        }
	                    });
	            
	        }
			
	    }
	
	
	
	// END EXTRA CODE
}
