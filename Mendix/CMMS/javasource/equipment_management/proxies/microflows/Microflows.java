// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package equipment_management.proxies.microflows;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public final class Microflows
{
	/**
	 * Private constructor to prevent instantiation of this class. 
	 */
	private Microflows() {}

	// These are the microflows for the Equipment_Management module
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-30
	 * 
	 * 설명 : 설비BOM에서 자재를 다중선택해서 저장하는 MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipment_BOM_Multiple_Registration_SaveBuilder(
		equipment_management.proxies.Equipment _equipment,
		java.util.List<material_management.proxies.Material> _materialList,
		equipment_management.proxies.Equipment_BOM_Helper _equipment_BOM_Helper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipment_BOM_Multiple_Registration_Save");
		builder = builder.withParam("Equipment", _equipment);
		builder = builder.withParam("MaterialList", _materialList);
		builder = builder.withParam("Equipment_BOM_Helper", _equipment_BOM_Helper);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-30
	 * 
	 * 설명 : 설비BOM에서 자재를 다중선택해서 저장하는 MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static void aCT_Equipment_BOM_Multiple_Registration_Save(
		IContext context,
		equipment_management.proxies.Equipment _equipment,
		java.util.List<material_management.proxies.Material> _materialList,
		equipment_management.proxies.Equipment_BOM_Helper _equipment_BOM_Helper
	)
	{
		aCT_Equipment_BOM_Multiple_Registration_SaveBuilder(
				_equipment,
				_materialList,
				_equipment_BOM_Helper
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-30
	 * 
	 * 설명 : 설비BOM에서 자재 등록 MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipment_BOM_NewBuilder(
		equipment_management.proxies.Equipment_BOM_Helper _equipment_BOM_Helper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipment_BOM_New");
		builder = builder.withParam("Equipment_BOM_Helper", _equipment_BOM_Helper);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-30
	 * 
	 * 설명 : 설비BOM에서 자재 등록 MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static void aCT_Equipment_BOM_New(
		IContext context,
		equipment_management.proxies.Equipment_BOM_Helper _equipment_BOM_Helper
	)
	{
		aCT_Equipment_BOM_NewBuilder(
				_equipment_BOM_Helper
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/19
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : Equipment 등록시 분류와 위치를 트리에서 선택 후 연결시켜주는 버튼
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipment_CreateNodeSelectBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipment_CreateNodeSelect");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/19
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : Equipment 등록시 분류와 위치를 트리에서 선택 후 연결시켜주는 버튼
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * V1.0 : 최초작성
	 */
	public static void aCT_Equipment_CreateNodeSelect(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		aCT_Equipment_CreateNodeSelectBuilder(
				_equipment
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment 상세정보 작성 후 저장
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipment_Detail_SaveBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipment_Detail_Save");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment 상세정보 작성 후 저장
	 * 
	 * V1.0 : 최초작성
	 */
	public static void aCT_Equipment_Detail_Save(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		aCT_Equipment_Detail_SaveBuilder(
				_equipment
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 선택 후 삭제
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipment_EDM_DeleteBuilder(
		equipment_management.proxies.Equipment_EDM_Helper _equipment_EDM_Helper,
		equipment_management.proxies.EquipmentEDM _equipmentEDM
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipment_EDM_Delete");
		builder = builder.withParam("Equipment_EDM_Helper", _equipment_EDM_Helper);
		builder = builder.withParam("EquipmentEDM", _equipmentEDM);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 선택 후 삭제
	 * V1.0 : 최초작성
	 */
	public static void aCT_Equipment_EDM_Delete(
		IContext context,
		equipment_management.proxies.Equipment_EDM_Helper _equipment_EDM_Helper,
		equipment_management.proxies.EquipmentEDM _equipmentEDM
	)
	{
		aCT_Equipment_EDM_DeleteBuilder(
				_equipment_EDM_Helper,
				_equipmentEDM
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 파일 다운로드
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipment_EDM_DownloadBuilder(
		equipment_management.proxies.Equipment_EDM_Helper _equipment_EDM_Helper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipment_EDM_Download");
		builder = builder.withParam("Equipment_EDM_Helper", _equipment_EDM_Helper);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 파일 다운로드
	 * 
	 * V1.0 : 최초작성
	 */
	public static void aCT_Equipment_EDM_Download(
		IContext context,
		equipment_management.proxies.Equipment_EDM_Helper _equipment_EDM_Helper
	)
	{
		aCT_Equipment_EDM_DownloadBuilder(
				_equipment_EDM_Helper
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 수정 후 저장
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipment_EDM_EditSaveBuilder(
		equipment_management.proxies.Equipment_EDM_Helper _equipment_EDM_Helper,
		equipment_management.proxies.EquipmentEDM _equipmentEDM
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipment_EDM_EditSave");
		builder = builder.withParam("Equipment_EDM_Helper", _equipment_EDM_Helper);
		builder = builder.withParam("EquipmentEDM", _equipmentEDM);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 수정 후 저장
	 * 
	 * V1.0 : 최초작성
	 */
	public static void aCT_Equipment_EDM_EditSave(
		IContext context,
		equipment_management.proxies.Equipment_EDM_Helper _equipment_EDM_Helper,
		equipment_management.proxies.EquipmentEDM _equipmentEDM
	)
	{
		aCT_Equipment_EDM_EditSaveBuilder(
				_equipment_EDM_Helper,
				_equipmentEDM
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 신규 저장
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipment_EDM_SaveBuilder(
		equipment_management.proxies.Equipment_EDM_Helper _equipment_EDM_Helper,
		equipment_management.proxies.EquipmentEDM _equipmentEDM
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipment_EDM_Save");
		builder = builder.withParam("Equipment_EDM_Helper", _equipment_EDM_Helper);
		builder = builder.withParam("EquipmentEDM", _equipmentEDM);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 신규 저장
	 * 
	 * V1.0 : 최초작성
	 */
	public static void aCT_Equipment_EDM_Save(
		IContext context,
		equipment_management.proxies.Equipment_EDM_Helper _equipment_EDM_Helper,
		equipment_management.proxies.EquipmentEDM _equipmentEDM
	)
	{
		aCT_Equipment_EDM_SaveBuilder(
				_equipment_EDM_Helper,
				_equipmentEDM
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment 작성 후 취소, 페이지 닫기
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipment_NewEdit_CancelBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipment_NewEdit_Cancel");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment 작성 후 취소, 페이지 닫기
	 * 
	 * V1.0 : 최초작성
	 */
	public static void aCT_Equipment_NewEdit_Cancel(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		aCT_Equipment_NewEdit_CancelBuilder(
				_equipment
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment 신규, 편집 후 저장
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipment_SaveBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipment_Save");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment 신규, 편집 후 저장
	 * 
	 * V1.0 : 최초작성
	 */
	public static void aCT_Equipment_Save(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		aCT_Equipment_SaveBuilder(
				_equipment
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-27
	 * 
	 * 설명 : 설비 사양 신규 등록 MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipment_Specification_CreateBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipment_Specification_Create");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-27
	 * 
	 * 설명 : 설비 사양 신규 등록 MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static void aCT_Equipment_Specification_Create(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		aCT_Equipment_Specification_CreateBuilder(
				_equipment
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : 설비별 비용 계산 업데이트 버튼
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipmentcost_updateBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipmentcost_update");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : 설비별 비용 계산 업데이트 버튼
	 * Version 1.0 : 생성
	 */
	public static void aCT_Equipmentcost_update(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		aCT_Equipmentcost_updateBuilder(
				_equipment
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : 설비별 지표 계산 업데이트 버튼
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Equipmentinfo_updateBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Equipmentinfo_update");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : 설비별 지표 계산 업데이트 버튼
	 * Version 1.0 : 생성
	 */
	public static void aCT_Equipmentinfo_update(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		aCT_Equipmentinfo_updateBuilder(
				_equipment
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/19
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : Equipment 등록시 위치를 트리에서 선택하는 MF
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_EquipmentLocation_Select_NodeBuilder(
		equipment_management.proxies.EquipmentLocation _equipmentLocation
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_EquipmentLocation_Select_Node");
		builder = builder.withParam("EquipmentLocation", _equipmentLocation);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/19
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : Equipment 등록시 위치를 트리에서 선택하는 MF
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * V1.0 : 최초작성
	 */
	public static void aCT_EquipmentLocation_Select_Node(
		IContext context,
		equipment_management.proxies.EquipmentLocation _equipmentLocation
	)
	{
		aCT_EquipmentLocation_Select_NodeBuilder(
				_equipmentLocation
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/19
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : Equipment 등록시 분류를 트리에서 선택하는 MF
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_EquipmentType_Select_NodeBuilder(
		equipment_management.proxies.EquipmentType _equipmentType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_EquipmentType_Select_Node");
		builder = builder.withParam("EquipmentType", _equipmentType);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/19
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : Equipment 등록시 분류를 트리에서 선택하는 MF
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * V1.0 : 최초작성
	 */
	public static void aCT_EquipmentType_Select_Node(
		IContext context,
		equipment_management.proxies.EquipmentType _equipmentType
	)
	{
		aCT_EquipmentType_Select_NodeBuilder(
				_equipmentType
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-12-01
	 * 설명 : BOM 삭제
	 * V1.0: 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder aCT_Material_Equipment_BOM_DeleteBuilder(
		equipment_management.proxies.Equipment_BOM_Helper _equipment_BOM_Helper,
		material_management.proxies.Material _material,
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.ACT_Material_Equipment_BOM_Delete");
		builder = builder.withParam("Equipment_BOM_Helper", _equipment_BOM_Helper);
		builder = builder.withParam("Material", _material);
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-12-01
	 * 설명 : BOM 삭제
	 * V1.0: 최초작성
	 */
	public static void aCT_Material_Equipment_BOM_Delete(
		IContext context,
		equipment_management.proxies.Equipment_BOM_Helper _equipment_BOM_Helper,
		material_management.proxies.Material _material,
		equipment_management.proxies.Equipment _equipment
	)
	{
		aCT_Material_Equipment_BOM_DeleteBuilder(
				_equipment_BOM_Helper,
				_material,
				_equipment
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : EDMS 파라메터 생성
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder cRE_EquipmentEDMSBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.CRE_EquipmentEDMS");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : EDMS 파라메터 생성
	 * Version 1.0 : 생성
	 */
	public static equipment_management.proxies.EquipmentEDMFile cRE_EquipmentEDMS(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		Object result = cRE_EquipmentEDMSBuilder(
				_equipment
			)
			.execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentEDMFile.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : 설비 헬퍼 파라메터 생성
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder create_EquipmentHelperBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Create_EquipmentHelper");
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : 설비 헬퍼 파라메터 생성
	 * Version 1.0 : 생성
	 */
	public static equipment_management.proxies.EquipmentHelper create_EquipmentHelper(IContext context)
	{
		Object result = create_EquipmentHelperBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentHelper.initialize(context, (IMendixObject) result);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_EqiupmenTotalCountBuilder(
		cmms_administration.proxies.Plant _plant
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_EqiupmenTotalCount");
		builder = builder.withParam("Plant", _plant);
		return builder;
	}

	public static cmms_administration.proxies.TotalCount dS_EqiupmenTotalCount(
		IContext context,
		cmms_administration.proxies.Plant _plant
	)
	{
		Object result = dS_EqiupmenTotalCountBuilder(
				_plant
			)
			.execute(context);
		return result == null ? null : cmms_administration.proxies.TotalCount.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-12-01
	 * 설명 : 설비 BOM 등록 및 편집을 위한 DS용 
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Equipment_BOMBuilder(
		equipment_management.proxies.Equipment _equipment,
		material_management.proxies.Material _material
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_Equipment_BOM");
		builder = builder.withParam("Equipment", _equipment);
		builder = builder.withParam("Material", _material);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-12-01
	 * 설명 : 설비 BOM 등록 및 편집을 위한 DS용 
	 */
	public static equipment_management.proxies.Equipment_BOM dS_Equipment_BOM(
		IContext context,
		equipment_management.proxies.Equipment _equipment,
		material_management.proxies.Material _material
	)
	{
		Object result = dS_Equipment_BOMBuilder(
				_equipment,
				_material
			)
			.execute(context);
		return result == null ? null : equipment_management.proxies.Equipment_BOM.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 목록 DS
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Equipment_Master_EDMBuilder(
		equipment_management.proxies.Equipment_Master_Helper _equipment_Master_Helper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_Equipment_Master_EDM");
		builder = builder.withParam("Equipment_Master_Helper", _equipment_Master_Helper);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 목록 DS
	 * 
	 * V1.0 : 최초작성
	 */
	public static java.util.List<equipment_management.proxies.EquipmentEDM> dS_Equipment_Master_EDM(
		IContext context,
		equipment_management.proxies.Equipment_Master_Helper _equipment_Master_Helper
	)
	{
		Object result = dS_Equipment_Master_EDMBuilder(
				_equipment_Master_Helper
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> equipment_management.proxies.EquipmentEDM.initialize(context, obj));
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-27
	 * 
	 * 설명 : 목록에서 갯수 세기 용도 Helper DS MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Equipment_Specification_CountBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_Equipment_Specification_Count");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-27
	 * 
	 * 설명 : 목록에서 갯수 세기 용도 Helper DS MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.Equipment_SpecificationCount dS_Equipment_Specification_Count(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		Object result = dS_Equipment_Specification_CountBuilder(
				_equipment
			)
			.execute(context);
		return result == null ? null : equipment_management.proxies.Equipment_SpecificationCount.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : 당월비용 DS
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_EquipmentCost_MonthlyBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_EquipmentCost_Monthly");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : 당월비용 DS
	 * Version 1.0 : 생성
	 */
	public static java.util.List<work_management.proxies.WorkOrder> dS_EquipmentCost_Monthly(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		Object result = dS_EquipmentCost_MonthlyBuilder(
				_equipment
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> work_management.proxies.WorkOrder.initialize(context, obj));
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/11
	 * 설명 : Treeview에 사용 될 DS
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_EquipmentMasterTypeSelect_TreeviewBuilder(
		commons.proxies.Company _company
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_EquipmentMasterTypeSelect_Treeview");
		builder = builder.withParam("Company", _company);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/09/11
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/11
	 * 설명 : Treeview에 사용 될 DS
	 * Version 1.0 : 생성
	 */
	public static java.util.List<equipment_management.proxies.EquipmentType> dS_EquipmentMasterTypeSelect_Treeview(
		IContext context,
		commons.proxies.Company _company
	)
	{
		Object result = dS_EquipmentMasterTypeSelect_TreeviewBuilder(
				_company
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> equipment_management.proxies.EquipmentType.initialize(context, obj));
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/11/01
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/11/01
	 * 설명 : 설비의 부모 선택을 위해 설비 리스트를 가져온다. 위치가 있으면 해당 위치에 있는 설비, 위치가 없으면 해당 공장의 설비, 둘 다 없으면 자신을 제외한 모든 설비를 반환한다.
	 * v1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_EquipmentParent_RetrieveBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_EquipmentParent_Retrieve");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/11/01
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/11/01
	 * 설명 : 설비의 부모 선택을 위해 설비 리스트를 가져온다. 위치가 있으면 해당 위치에 있는 설비, 위치가 없으면 해당 공장의 설비, 둘 다 없으면 자신을 제외한 모든 설비를 반환한다.
	 * v1.0 : 생성
	 */
	public static java.util.List<equipment_management.proxies.Equipment> dS_EquipmentParent_Retrieve(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		Object result = dS_EquipmentParent_RetrieveBuilder(
				_equipment
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> equipment_management.proxies.Equipment.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_EquipmentTree_RetrieveBuilder(
		equipment_management.proxies.Equipment _rootEquipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_EquipmentTree_Retrieve");
		builder = builder.withParam("RootEquipment", _rootEquipment);
		return builder;
	}

	public static java.util.List<equipment_management.proxies.Equipment> dS_EquipmentTree_Retrieve(
		IContext context,
		equipment_management.proxies.Equipment _rootEquipment
	)
	{
		Object result = dS_EquipmentTree_RetrieveBuilder(
				_rootEquipment
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> equipment_management.proxies.Equipment.initialize(context, obj));
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : 소요자재 DS
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_EquipmentusedMaterialBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_EquipmentusedMaterial");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : 소요자재 DS
	 * Version 1.0 : 생성
	 */
	public static java.util.List<work_management.proxies.WorkOrderMaterials> dS_EquipmentusedMaterial(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		Object result = dS_EquipmentusedMaterialBuilder(
				_equipment
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> work_management.proxies.WorkOrderMaterials.initialize(context, obj));
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_EquipmentWorkOrder_CountBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_EquipmentWorkOrder_Count");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	public static cmms_administration.proxies.TotalCount dS_EquipmentWorkOrder_Count(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		Object result = dS_EquipmentWorkOrder_CountBuilder(
				_equipment
			)
			.execute(context);
		return result == null ? null : cmms_administration.proxies.TotalCount.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : 설비 EDMS DS
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_EquipmnetEDMSBuilder(
		equipment_management.proxies.EquipmentEDM _equipmentEDM
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_EquipmnetEDMS");
		builder = builder.withParam("EquipmentEDM", _equipmentEDM);
		return builder;
	}

	/**
	 * 최초 작성자 : 박재훈
	 * 최초 작성일 : 2023/12/08
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 설명 : 설비 EDMS DS
	 * Version 1.0 : 생성
	 */
	public static equipment_management.proxies.EquipmentEDMFile dS_EquipmnetEDMS(
		IContext context,
		equipment_management.proxies.EquipmentEDM _equipmentEDM
	)
	{
		Object result = dS_EquipmnetEDMSBuilder(
				_equipmentEDM
			)
			.execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentEDMFile.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-30
	 * 
	 * 설명 : 설비 BOM에 등록된 자재를 가져오기 위한 DS MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Material_EquipmentBOMBuilder(
		equipment_management.proxies.Equipment_BOM_Helper _equipment_BOM_Helper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_Material_EquipmentBOM");
		builder = builder.withParam("Equipment_BOM_Helper", _equipment_BOM_Helper);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-30
	 * 
	 * 설명 : 설비 BOM에 등록된 자재를 가져오기 위한 DS MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static java.util.List<material_management.proxies.Material> dS_Material_EquipmentBOM(
		IContext context,
		equipment_management.proxies.Equipment_BOM_Helper _equipment_BOM_Helper
	)
	{
		Object result = dS_Material_EquipmentBOMBuilder(
				_equipment_BOM_Helper
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> material_management.proxies.Material.initialize(context, obj));
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-30
	 * 
	 * 설명 : 설비BOM에서 자재 다중선택을 위한 DS MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder dS_Material_Multiple_registrationBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.DS_Material_Multiple_registration");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-30
	 * 
	 * 설명 : 설비BOM에서 자재 다중선택을 위한 DS MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static java.util.List<material_management.proxies.Material> dS_Material_Multiple_registration(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		Object result = dS_Material_Multiple_registrationBuilder(
				_equipment
			)
			.execute(context);
		return result == null ? null : com.mendix.utils.ListUtils.map((java.util.List<IMendixObject>) result, obj -> material_management.proxies.Material.initialize(context, obj));
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/17
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment 커밋
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_CommitBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_Commit");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/17
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment 커밋
	 * 
	 * V1.0 : 최초작성
	 */
	public static void equipment_Commit(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		equipment_CommitBuilder(
				_equipment
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/17
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/17
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.Equipment equipment_Create(IContext context)
	{
		Object result = equipment_CreateBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.Equipment.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM File 커밋
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_EDM_File_CommitBuilder(
		equipment_management.proxies.EquipmentEDMFile _equipmentEDMFile
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_EDM_File_Commit");
		builder = builder.withParam("EquipmentEDMFile", _equipmentEDMFile);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM File 커밋
	 * 
	 * V1.0 : 최초작성
	 */
	public static void equipment_EDM_File_Commit(
		IContext context,
		equipment_management.proxies.EquipmentEDMFile _equipmentEDMFile
	)
	{
		equipment_EDM_File_CommitBuilder(
				_equipmentEDMFile
			)
			.execute(context);
	}
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_EDM_Helper_CreateBuilder(
		equipment_management.proxies.EquipmentEDM _equipmentEDM
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_EDM_Helper_Create");
		builder = builder.withParam("EquipmentEDM", _equipmentEDM);
		return builder;
	}

	public static equipment_management.proxies.Equipment_EDM_Helper equipment_EDM_Helper_Create(
		IContext context,
		equipment_management.proxies.EquipmentEDM _equipmentEDM
	)
	{
		Object result = equipment_EDM_Helper_CreateBuilder(
				_equipmentEDM
			)
			.execute(context);
		return result == null ? null : equipment_management.proxies.Equipment_EDM_Helper.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment Image 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_Image_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_Image_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment Image 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.EquipmentImage equipment_Image_Create(IContext context)
	{
		Object result = equipment_Image_CreateBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentImage.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment Image Helper 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_Image_Helper_CreateBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_Image_Helper_Create");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment Image Helper 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.Equipment_Image_Helper equipment_Image_Helper_Create(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		Object result = equipment_Image_Helper_CreateBuilder(
				_equipment
			)
			.execute(context);
		return result == null ? null : equipment_management.proxies.Equipment_Image_Helper.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-10
	 * 최종수정자 : 
	 * 최종수정일 :
	 * 
	 * 설명 : 설비정보조회에서 메뉴별 정보를 보기 위한 헬퍼 DS MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_Information_Helper_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_Information_Helper_Create");
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-10
	 * 최종수정자 : 
	 * 최종수정일 :
	 * 
	 * 설명 : 설비정보조회에서 메뉴별 정보를 보기 위한 헬퍼 DS MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.Equipment_InformationHelper equipment_Information_Helper_Create(IContext context)
	{
		Object result = equipment_Information_Helper_CreateBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.Equipment_InformationHelper.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/18
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment List커밋
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_List_CommitBuilder(
		java.util.List<equipment_management.proxies.Equipment> _equipmentList
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_List_Commit");
		builder = builder.withParam("EquipmentList", _equipmentList);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/18
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment List커밋
	 * 
	 * V1.0 : 최초작성
	 */
	public static void equipment_List_Commit(
		IContext context,
		java.util.List<equipment_management.proxies.Equipment> _equipmentList
	)
	{
		equipment_List_CommitBuilder(
				_equipmentList
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment master helper 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_Master_Helper_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_Master_Helper_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment master helper 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.Equipment_Master_Helper equipment_Master_Helper_Create(IContext context)
	{
		Object result = equipment_Master_Helper_CreateBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.Equipment_Master_Helper.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/25
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : 이동관리이력등록
	 *  
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_Movement_CreateBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_Movement_Create");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/25
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : 이동관리이력등록
	 *  
	 * V1.0 : 최초작성
	 */
	public static void equipment_Movement_Create(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		equipment_Movement_CreateBuilder(
				_equipment
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/25
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : 이동관리이력 삭제
	 *  
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_Movement_DeleteBuilder(
		equipment_management.proxies.EquipmentMovement _equipmentMovement
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_Movement_Delete");
		builder = builder.withParam("EquipmentMovement", _equipmentMovement);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/25
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : 이동관리이력 삭제
	 *  
	 * V1.0 : 최초작성
	 */
	public static void equipment_Movement_Delete(
		IContext context,
		equipment_management.proxies.EquipmentMovement _equipmentMovement
	)
	{
		equipment_Movement_DeleteBuilder(
				_equipmentMovement
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/25
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : 이동관리이력 수정
	 *  
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_Movement_EditBuilder(
		equipment_management.proxies.EquipmentMovement _equipmentMovement
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_Movement_Edit");
		builder = builder.withParam("EquipmentMovement", _equipmentMovement);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/25
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : 이동관리이력 수정
	 *  
	 * V1.0 : 최초작성
	 */
	public static void equipment_Movement_Edit(
		IContext context,
		equipment_management.proxies.EquipmentMovement _equipmentMovement
	)
	{
		equipment_Movement_EditBuilder(
				_equipmentMovement
			)
			.execute(context);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-27
	 * 
	 * 설명 : 목록에서 갯수 세기 용도 Helper
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_Specification_Count_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_Specification_Count_Create");
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-27
	 * 
	 * 설명 : 목록에서 갯수 세기 용도 Helper
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.Equipment_SpecificationCount equipment_Specification_Count_Create(IContext context)
	{
		Object result = equipment_Specification_Count_CreateBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.Equipment_SpecificationCount.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-27
	 * 
	 * 설명 : 설비 사양 ( Equipment_Specification) 생성 MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipment_Specification_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.Equipment_Specification_Create");
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-27
	 * 
	 * 설명 : 설비 사양 ( Equipment_Specification) 생성 MF
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.EquipmentSpecification equipment_Specification_Create(IContext context)
	{
		Object result = equipment_Specification_CreateBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentSpecification.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-12-01
	 * 설명 : 설비 BOM Create MF
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentBOM_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentBOM_Create");
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-12-01
	 * 설명 : 설비 BOM Create MF
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.Equipment_BOM equipmentBOM_Create(IContext context)
	{
		Object result = equipmentBOM_CreateBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.Equipment_BOM.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-30
	 * 
	 * 설명 : 설비를 선택해서 해당하는 BOM을 보여주기 위한 헬퍼 Create
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentBOMHelper_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentBOMHelper_Create");
		return builder;
	}

	/**
	 * 최초작성자 : 김동명
	 * 최초작성일 : 2023-11-30
	 * 
	 * 설명 : 설비를 선택해서 해당하는 BOM을 보여주기 위한 헬퍼 Create
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.Equipment_BOM_Helper equipmentBOMHelper_Create(IContext context)
	{
		Object result = equipmentBOMHelper_CreateBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.Equipment_BOM_Helper.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment detail information생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentDetailInformation_CreateBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentDetailInformation_Create");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment detail information생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.EquipmentDetailInformation equipmentDetailInformation_Create(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		Object result = equipmentDetailInformation_CreateBuilder(
				_equipment
			)
			.execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentDetailInformation.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 커밋
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentEDM_CommitBuilder(
		equipment_management.proxies.EquipmentEDM _equipmentEDM
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentEDM_Commit");
		builder = builder.withParam("EquipmentEDM", _equipmentEDM);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 커밋
	 * 
	 * V1.0 : 최초작성
	 */
	public static void equipmentEDM_Commit(
		IContext context,
		equipment_management.proxies.EquipmentEDM _equipmentEDM
	)
	{
		equipmentEDM_CommitBuilder(
				_equipmentEDM
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentEDM_CreateBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentEDM_Create");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.EquipmentEDM equipmentEDM_Create(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		Object result = equipmentEDM_CreateBuilder(
				_equipment
			)
			.execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentEDM.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM File 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentEDMFile_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentEDMFile_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM File 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.EquipmentEDMFile equipmentEDMFile_Create(IContext context)
	{
		Object result = equipmentEDMFile_CreateBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentEDMFile.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment File Image생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentEDMFileImage_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentEDMFileImage_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment File Image생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.EquipmentEDMFileImage equipmentEDMFileImage_Create(IContext context)
	{
		Object result = equipmentEDMFileImage_CreateBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentEDMFileImage.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 생성 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentHelper_CreateBuilder(
		administration.proxies.Account _account
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentHelper_Create");
		builder = builder.withParam("Account", _account);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 생성 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static equipment_management.proxies.EquipmentHelper equipmentHelper_Create(
		IContext context,
		administration.proxies.Account _account
	)
	{
		Object result = equipmentHelper_CreateBuilder(
				_account
			)
			.execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentHelper.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/18
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : EquipmentHelper 삭제
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentHelper_DeleteBuilder(
		administration.proxies.Account _account
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentHelper_Delete");
		builder = builder.withParam("Account", _account);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/18
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : EquipmentHelper 삭제
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * V1.0 : 최초작성
	 */
	public static void equipmentHelper_Delete(
		IContext context,
		administration.proxies.Account _account
	)
	{
		equipmentHelper_DeleteBuilder(
				_account
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 생성 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentHelperChild_CreateBuilder(
		administration.proxies.Account _account
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentHelperChild_Create");
		builder = builder.withParam("Account", _account);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/20
	 * 최종 수정자 : 
	 * 최종 수정일 : 
	 * 
	 * 설명 : Helper 생성 Sub MF
	 * 
	 * Version 1.0 : 생성
	 */
	public static equipment_management.proxies.EquipmentHelper_Child equipmentHelperChild_Create(
		IContext context,
		administration.proxies.Account _account
	)
	{
		Object result = equipmentHelperChild_CreateBuilder(
				_account
			)
			.execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentHelper_Child.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : EquipmentLocation 커밋
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentLocation_CommitBuilder(
		equipment_management.proxies.EquipmentLocation _equipmentLocation
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentLocation_Commit");
		builder = builder.withParam("EquipmentLocation", _equipmentLocation);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : EquipmentLocation 커밋
	 * 
	 * V1.0 : 최초작성
	 */
	public static void equipmentLocation_Commit(
		IContext context,
		equipment_management.proxies.EquipmentLocation _equipmentLocation
	)
	{
		equipmentLocation_CommitBuilder(
				_equipmentLocation
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : EquipmentLocation 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentLocation_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentLocation_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : EquipmentLocation 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.EquipmentLocation equipmentLocation_Create(IContext context)
	{
		Object result = equipmentLocation_CreateBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentLocation.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : EquipmentType 커밋
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentType_CommitBuilder(
		equipment_management.proxies.EquipmentType _equipmentType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentType_Commit");
		builder = builder.withParam("EquipmentType", _equipmentType);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : EquipmentType 커밋
	 * 
	 * V1.0 : 최초작성
	 */
	public static void equipmentType_Commit(
		IContext context,
		equipment_management.proxies.EquipmentType _equipmentType
	)
	{
		equipmentType_CommitBuilder(
				_equipmentType
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : EquipmentType 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder equipmentType_CreateBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.EquipmentType_Create");
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : EquipmentType 생성
	 * 
	 * V1.0 : 최초작성
	 */
	public static equipment_management.proxies.EquipmentType equipmentType_Create(IContext context)
	{
		Object result = equipmentType_CreateBuilder().execute(context);
		return result == null ? null : equipment_management.proxies.EquipmentType.initialize(context, (IMendixObject) result);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/11/01
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/11/01
	 * 설명 : 설비 NewEdit 팝업에서 루트 체크할 경우 레벨을 자동 1로 설정하고 루트가 아닐때는 0으로 되돌린다
	 * v1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCH_EquipmentLevel_ChangeBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.OCH_EquipmentLevel_Change");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/11/01
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/11/01
	 * 설명 : 설비 NewEdit 팝업에서 루트 체크할 경우 레벨을 자동 1로 설정하고 루트가 아닐때는 0으로 되돌린다
	 * v1.0 : 생성
	 */
	public static void oCH_EquipmentLevel_Change(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		oCH_EquipmentLevel_ChangeBuilder(
				_equipment
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/11/01
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/11/01
	 * 설명 : 설비 트리를 클릭했을 때
	 * v1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCK_Equipment_Node_SelectBuilder(
		equipment_management.proxies.Equipment _equipment
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.OCK_Equipment_Node_Select");
		builder = builder.withParam("Equipment", _equipment);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/11/01
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/11/01
	 * 설명 : 설비 트리를 클릭했을 때
	 * v1.0 : 생성
	 */
	public static void oCK_Equipment_Node_Select(
		IContext context,
		equipment_management.proxies.Equipment _equipment
	)
	{
		oCK_Equipment_Node_SelectBuilder(
				_equipment
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/18
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCK_EquipmentMasterLocation_NodeBuilder(
		equipment_management.proxies.EquipmentLocation _equipmentLocation
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.OCK_EquipmentMasterLocation_Node");
		builder = builder.withParam("EquipmentLocation", _equipmentLocation);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/18
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * Version 1.0 : 생성
	 */
	public static void oCK_EquipmentMasterLocation_Node(
		IContext context,
		equipment_management.proxies.EquipmentLocation _equipmentLocation
	)
	{
		oCK_EquipmentMasterLocation_NodeBuilder(
				_equipmentLocation
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/18
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCK_EquipmentMasterLocation_Node_PlantBuilder(
		cmms_administration.proxies.Plant _plant
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.OCK_EquipmentMasterLocation_Node_Plant");
		builder = builder.withParam("Plant", _plant);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/18
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * Version 1.0 : 생성
	 */
	public static void oCK_EquipmentMasterLocation_Node_Plant(
		IContext context,
		cmms_administration.proxies.Plant _plant
	)
	{
		oCK_EquipmentMasterLocation_Node_PlantBuilder(
				_plant
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/18
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCK_EquipmentMasterType_NodeBuilder(
		equipment_management.proxies.EquipmentType _equipmentType
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.OCK_EquipmentMasterType_Node");
		builder = builder.withParam("EquipmentType", _equipmentType);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/18
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * Version 1.0 : 생성
	 */
	public static void oCK_EquipmentMasterType_Node(
		IContext context,
		equipment_management.proxies.EquipmentType _equipmentType
	)
	{
		oCK_EquipmentMasterType_NodeBuilder(
				_equipmentType
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/18
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * Version 1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder oCK_EquipmentMasterType_Node_CompanyBuilder()
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.OCK_EquipmentMasterType_Node_Company");
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/09/18
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/09/20
	 * 
	 * 설명 : 트리뷰에서 노드 클릭했을때의 액션 / 단일 object 정의
	 * 
	 * V 1.1 : 개별화 로직 적용 // 2023.09/20 김동명
	 * Version 1.0 : 생성
	 */
	public static void oCK_EquipmentMasterType_Node_Company(IContext context)
	{
		oCK_EquipmentMasterType_Node_CompanyBuilder().execute(context);
	}
	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/11/01
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/11/01
	 * 설명 : 선택된 설비의 하위 설비를 재귀적으로 돌아 해당 설비의 트리구조만 뽑아낸다
	 * v1.0 : 생성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder sUB_EquipmentNode_RetrieveBuilder(
		equipment_management.proxies.Equipment _rootEquipment,
		java.util.List<equipment_management.proxies.Equipment> _equipmentList,
		java.util.List<equipment_management.proxies.Equipment> _newEquipmentList
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.SUB_EquipmentNode_Retrieve");
		builder = builder.withParam("RootEquipment", _rootEquipment);
		builder = builder.withParam("EquipmentList", _equipmentList);
		builder = builder.withParam("NewEquipmentList", _newEquipmentList);
		return builder;
	}

	/**
	 * 최초 작성자 : 이단비
	 * 최초 작성일 : 2023/11/01
	 * 최종 수정자 : 
	 * 최종 수정일 : 2023/11/01
	 * 설명 : 선택된 설비의 하위 설비를 재귀적으로 돌아 해당 설비의 트리구조만 뽑아낸다
	 * v1.0 : 생성
	 */
	public static void sUB_EquipmentNode_Retrieve(
		IContext context,
		equipment_management.proxies.Equipment _rootEquipment,
		java.util.List<equipment_management.proxies.Equipment> _equipmentList,
		java.util.List<equipment_management.proxies.Equipment> _newEquipmentList
	)
	{
		sUB_EquipmentNode_RetrieveBuilder(
				_rootEquipment,
				_equipmentList,
				_newEquipmentList
			)
			.execute(context);
	}
	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 저장 간 Validation
	 * 
	 * V1.0 : 최초작성
	 */
	public static com.mendix.core.actionmanagement.MicroflowCallBuilder vAL_Equipment_EDM_SaveBuilder(
		equipment_management.proxies.Equipment_EDM_Helper _equipment_EDM_Helper
	)
	{
		com.mendix.core.actionmanagement.MicroflowCallBuilder builder = Core.microflowCall("Equipment_Management.VAL_Equipment_EDM_Save");
		builder = builder.withParam("Equipment_EDM_Helper", _equipment_EDM_Helper);
		return builder;
	}

	/**
	 * 최초 작성자 : 김동명
	 * 최초 작성일 : 2023/11/15
	 * 최종 수정자 : 
	 * 최종 수정일 :
	 * 
	 * 설명 : Equipment EDM 저장 간 Validation
	 * 
	 * V1.0 : 최초작성
	 */
	public static boolean vAL_Equipment_EDM_Save(
		IContext context,
		equipment_management.proxies.Equipment_EDM_Helper _equipment_EDM_Helper
	)
	{
		Object result = vAL_Equipment_EDM_SaveBuilder(
				_equipment_EDM_Helper
			)
			.execute(context);
		return (boolean) result;
	}
}
