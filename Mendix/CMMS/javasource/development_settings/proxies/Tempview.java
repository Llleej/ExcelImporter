// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package development_settings.proxies;

public class Tempview implements com.mendix.systemwideinterfaces.core.IEntityProxy
{
	private final com.mendix.systemwideinterfaces.core.IMendixObject tempviewMendixObject;

	private final com.mendix.systemwideinterfaces.core.IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final java.lang.String entityName = "Development_Settings.Tempview";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Node("Development_Settings.Node"),
		SelectMulti("Development_Settings.SelectMulti"),
		Tempview_Menu("Development_Settings.Tempview_Menu");

		private final java.lang.String metaName;

		MemberNames(java.lang.String s)
		{
			metaName = s;
		}

		@java.lang.Override
		public java.lang.String toString()
		{
			return metaName;
		}
	}

	public Tempview(com.mendix.systemwideinterfaces.core.IContext context)
	{
		this(context, com.mendix.core.Core.instantiate(context, entityName));
	}

	protected Tempview(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject tempviewMendixObject)
	{
		if (tempviewMendixObject == null) {
			throw new java.lang.IllegalArgumentException("The given object cannot be null.");
		}
		if (!com.mendix.core.Core.isSubClassOf(entityName, tempviewMendixObject.getType())) {
			throw new java.lang.IllegalArgumentException(String.format("The given object is not a %s", entityName));
		}	

		this.tempviewMendixObject = tempviewMendixObject;
		this.context = context;
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.createSudoClone() can be used to obtain sudo access).
	 * @param context The context to be used
	 * @param mendixObject The Mendix object for the new instance
	 * @return a new instance of this proxy class
	 */
	public static development_settings.proxies.Tempview initialize(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixObject mendixObject)
	{
		return new development_settings.proxies.Tempview(context, mendixObject);
	}

	public static development_settings.proxies.Tempview load(com.mendix.systemwideinterfaces.core.IContext context, com.mendix.systemwideinterfaces.core.IMendixIdentifier mendixIdentifier) throws com.mendix.core.CoreException
	{
		com.mendix.systemwideinterfaces.core.IMendixObject mendixObject = com.mendix.core.Core.retrieveId(context, mendixIdentifier);
		return development_settings.proxies.Tempview.initialize(context, mendixObject);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of Node
	 */
	public final java.util.List<development_settings.proxies.Menu> getNode() throws com.mendix.core.CoreException
	{
		return getNode(getContext());
	}

	/**
	 * @param context
	 * @return value of Node
	 * @throws com.mendix.core.CoreException
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<development_settings.proxies.Menu> getNode(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<development_settings.proxies.Menu> result = new java.util.ArrayList<>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.Node.toString());
		if (valueObject == null) {
			return result;
		}
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject)) {
			result.add(development_settings.proxies.Menu.initialize(context, mendixObject));
		}
		return result;
	}

	/**
	 * Set value of Node
	 * @param node
	 */
	public final void setNode(java.util.List<development_settings.proxies.Menu> node)
	{
		setNode(getContext(), node);
	}

	/**
	 * Set value of Node
	 * @param context
	 * @param node
	 */
	public final void setNode(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<development_settings.proxies.Menu> node)
	{
		var identifiers = node
			.stream()
			.map(proxyObject -> proxyObject.getMendixObject().getId())
			.collect(java.util.stream.Collectors.toList());
		
		getMendixObject().setValue(context, MemberNames.Node.toString(), identifiers);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of SelectMulti
	 */
	public final java.util.List<development_settings.proxies.Menu> getSelectMulti() throws com.mendix.core.CoreException
	{
		return getSelectMulti(getContext());
	}

	/**
	 * @param context
	 * @return value of SelectMulti
	 * @throws com.mendix.core.CoreException
	 */
	@SuppressWarnings("unchecked")
	public final java.util.List<development_settings.proxies.Menu> getSelectMulti(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		java.util.List<development_settings.proxies.Menu> result = new java.util.ArrayList<>();
		Object valueObject = getMendixObject().getValue(context, MemberNames.SelectMulti.toString());
		if (valueObject == null) {
			return result;
		}
		for (com.mendix.systemwideinterfaces.core.IMendixObject mendixObject : com.mendix.core.Core.retrieveIdList(context, (java.util.List<com.mendix.systemwideinterfaces.core.IMendixIdentifier>) valueObject)) {
			result.add(development_settings.proxies.Menu.initialize(context, mendixObject));
		}
		return result;
	}

	/**
	 * Set value of SelectMulti
	 * @param selectmulti
	 */
	public final void setSelectMulti(java.util.List<development_settings.proxies.Menu> selectmulti)
	{
		setSelectMulti(getContext(), selectmulti);
	}

	/**
	 * Set value of SelectMulti
	 * @param context
	 * @param selectmulti
	 */
	public final void setSelectMulti(com.mendix.systemwideinterfaces.core.IContext context, java.util.List<development_settings.proxies.Menu> selectmulti)
	{
		var identifiers = selectmulti
			.stream()
			.map(proxyObject -> proxyObject.getMendixObject().getId())
			.collect(java.util.stream.Collectors.toList());
		
		getMendixObject().setValue(context, MemberNames.SelectMulti.toString(), identifiers);
	}

	/**
	 * @throws com.mendix.core.CoreException
	 * @return value of Tempview_Menu
	 */
	public final development_settings.proxies.Menu getTempview_Menu() throws com.mendix.core.CoreException
	{
		return getTempview_Menu(getContext());
	}

	/**
	 * @param context
	 * @return value of Tempview_Menu
	 * @throws com.mendix.core.CoreException
	 */
	public final development_settings.proxies.Menu getTempview_Menu(com.mendix.systemwideinterfaces.core.IContext context) throws com.mendix.core.CoreException
	{
		development_settings.proxies.Menu result = null;
		com.mendix.systemwideinterfaces.core.IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.Tempview_Menu.toString());
		if (identifier != null) {
			result = development_settings.proxies.Menu.load(context, identifier);
		}
		return result;
	}

	/**
	 * Set value of Tempview_Menu
	 * @param tempview_menu
	 */
	public final void setTempview_Menu(development_settings.proxies.Menu tempview_menu)
	{
		setTempview_Menu(getContext(), tempview_menu);
	}

	/**
	 * Set value of Tempview_Menu
	 * @param context
	 * @param tempview_menu
	 */
	public final void setTempview_Menu(com.mendix.systemwideinterfaces.core.IContext context, development_settings.proxies.Menu tempview_menu)
	{
		if (tempview_menu == null) {
			getMendixObject().setValue(context, MemberNames.Tempview_Menu.toString(), null);
		} else {
			getMendixObject().setValue(context, MemberNames.Tempview_Menu.toString(), tempview_menu.getMendixObject().getId());
		}
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IMendixObject getMendixObject()
	{
		return tempviewMendixObject;
	}

	@Override
	public final com.mendix.systemwideinterfaces.core.IContext getContext()
	{
		return context;
	}

	@java.lang.Override
	public boolean equals(Object obj)
	{
		if (obj == this) {
			return true;
		}
		if (obj != null && getClass().equals(obj.getClass()))
		{
			final development_settings.proxies.Tempview that = (development_settings.proxies.Tempview) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@java.lang.Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

  /**
   * Gives full name ("Module.Entity" name) of the type of the entity.
   *
   * @return the name
   */
	public static java.lang.String getType()
	{
		return entityName;
	}
}
